{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dejafoo Documentation","text":"<ul> <li> <p> Quick Start</p> <p>Get up and running with Dejafoo in minutes</p> <p> Quick Start</p> </li> <li> <p> Configuration</p> <p>Learn how to configure caching, domains, and more</p> <p> Configuration</p> </li> <li> <p> API Reference</p> <p>Complete API documentation and examples</p> <p> API Reference</p> </li> <li> <p> Deployment</p> <p>Deploy to AWS with our two-phase strategy</p> <p> Deployment Guide</p> </li> </ul>"},{"location":"#what-is-dejafoo","title":"What is Dejafoo?","text":"<p>Dejafoo is a high-performance HTTP proxy service built with AWS Lambda that provides intelligent S3-based caching for expensive API endpoints. It's designed to share cached responses between different environments and applications.</p>"},{"location":"#why-dejafoo-exists","title":"Why Dejafoo Exists","text":""},{"location":"#the-problem-expensive-api-credits-burn-too-fast","title":"The Problem: Expensive API Credits Burn Too Fast","text":"<p>When building features that depend on expensive APIs (like Apollo, Coresignal, or other services with limited monthly requests), you quickly burn through your credits during development. Running the same API calls in development, staging, and production means paying 3x for the same data.</p>"},{"location":"#the-solution-share-api-data-across-environments","title":"The Solution: Share API Data Across Environments","text":"<p>Dejafoo lets you cache expensive API responses and share them between environments using simple subdomain-based isolation. One API call in development can serve data to production, staging, and other environments without additional API costs.</p>"},{"location":"#real-world-use-cases","title":"Real-World Use Cases","text":"<ul> <li>Cost Optimization: Share expensive API data between dev/staging/prod environments</li> <li>Rate Limit Management: Avoid hitting API rate limits during development and testing</li> <li>Performance: Get instant responses for repeated API calls</li> <li>Reliability: Continue development when upstream APIs are down or slow</li> <li>Team Collaboration: Share expensive API data between team members</li> <li>CI/CD Optimization: Cache API responses in build pipelines</li> <li>Testing Consistency: Use the same data across different test runs</li> <li>Cross-Environment Sync: Keep data consistent across all your environments</li> </ul>"},{"location":"#example-apollo-api-integration","title":"Example: Apollo API Integration","text":"<pre><code># Development: Fetch company data (uses 1 API credit)\ncurl \"https://dev123.dejafoo.io?url=https://api.apollo.io/v1/companies&amp;ttl=24h\"\n\n# Staging: Same data, no additional API cost\ncurl \"https://staging456.dejafoo.io?url=https://api.apollo.io/v1/companies&amp;ttl=24h\"\n\n# Production: Same data, no additional API cost\ncurl \"https://prod789.dejafoo.io?url=https://api.apollo.io/v1/companies&amp;ttl=24h\"\n</code></pre> <p>Result: 1 API call, 3 environments served. Save 66% on API costs!</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>High Performance: Sub-second response times with intelligent caching</li> <li>Serverless: Built on AWS Lambda for automatic scaling</li> <li>Secure: SSL/TLS encryption and minimal IAM permissions</li> <li>Custom Domains: Full Route53 and API Gateway integration</li> <li>Monitoring: CloudWatch integration for observability</li> <li>Easy Deployment: One-command infrastructure and code deployment</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph LR\n    A[Client] --&gt; B[Route53]\n    B --&gt; C[API Gateway]\n    C --&gt; D[Lambda Function]\n    D --&gt; E[Upstream API]\n    D --&gt; F[S3 Cache]\n\n    style A fill:#e1f5fe\n    style E fill:#f3e5f5\n    style F fill:#e8f5e8</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code># Cache an API response for 1 hour\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=1h\"\n\n# Use different subdomain for isolation\ncurl \"https://another456.dejafoo.io?url=https://api.example.com/data&amp;ttl=30m\"\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Quick Start - Get Dejafoo running in 5 minutes</li> <li>Installation - Detailed installation guide</li> <li>Configuration - Configure caching and domains</li> <li>Usage - Learn how to use Dejafoo effectively</li> </ol>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Getting Started: Installation and basic setup</li> <li>User Guide: How to use Dejafoo effectively</li> <li>API Reference: Complete API documentation</li> <li>Deployment: Infrastructure and code deployment</li> <li>Development: Architecture and contribution guide</li> <li>Reference: Technical reference materials</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>Documentation: This site contains comprehensive guides</li> <li>Community: Join our discussions on GitHub</li> </ul> <p>Built with AWS Lambda, API Gateway, and S3</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete API documentation for Dejafoo's HTTP proxy service.</p>"},{"location":"api-reference/#base-url","title":"Base URL","text":"<ul> <li>Hosted Version: <code>https://{your-random-string}.dejafoo.io</code></li> <li>Custom Domain: <code>https://{your-random-string}.yourdomain.com</code></li> <li>API Gateway Direct: <code>https://your-api-id.execute-api.region.amazonaws.com/prod</code></li> </ul>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<p>Dejafoo currently does not require authentication. All requests are public.</p>"},{"location":"api-reference/#rate-limits","title":"Rate Limits","text":"<ul> <li>Hosted Version: 1000 requests/hour per IP</li> <li>Self-Hosted: No limits (AWS API Gateway limits apply)</li> </ul>"},{"location":"api-reference/#request-format","title":"Request Format","text":"<p>All requests are made via HTTP GET to the Dejafoo endpoint with query parameters.</p>"},{"location":"api-reference/#required-parameters","title":"Required Parameters","text":"Parameter Type Description Example <code>url</code> string The upstream API endpoint to cache <code>https://api.example.com/users</code> <code>ttl</code> string Time-to-live for the cache <code>30s</code>, <code>1h</code>, <code>7d</code>"},{"location":"api-reference/#optional-parameters","title":"Optional Parameters","text":"Parameter Type Description Example <code>method</code> string HTTP method (default: GET) <code>POST</code>, <code>PUT</code>, <code>DELETE</code> <code>headers</code> string JSON-encoded headers <code>{\"Authorization\": \"Bearer token\"}</code>"},{"location":"api-reference/#response-format","title":"Response Format","text":""},{"location":"api-reference/#success-response","title":"Success Response","text":"<pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nx-cache: HIT\nx-cache-key: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456\nx-cache-ttl: 3600\nx-cache-expires: 2024-01-01T12:00:00Z\n\n{\n  \"id\": 1,\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\"\n}\n</code></pre>"},{"location":"api-reference/#response-headers","title":"Response Headers","text":"Header Description Example <code>x-cache</code> Cache status <code>HIT</code>, <code>MISS</code> <code>x-cache-key</code> Cache key used (SHA-256 hash) <code>a1b2c3d4e5f6...</code> <code>x-cache-ttl</code> TTL in seconds <code>3600</code> <code>x-cache-expires</code> Expiration timestamp <code>2024-01-01T12:00:00Z</code>"},{"location":"api-reference/#error-responses","title":"Error Responses","text":""},{"location":"api-reference/#400-bad-request","title":"400 Bad Request","text":"<pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"error\": \"Invalid TTL format\",\n  \"message\": \"TTL must be in format like '30s', '1h', '7d'\"\n}\n</code></pre>"},{"location":"api-reference/#404-not-found","title":"404 Not Found","text":"<pre><code>HTTP/1.1 404 Not Found\nContent-Type: application/json\n\n{\n  \"error\": \"Upstream service not found\",\n  \"message\": \"Could not reach https://api.example.com/users\"\n}\n</code></pre>"},{"location":"api-reference/#500-internal-server-error","title":"500 Internal Server Error","text":"<pre><code>HTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\n{\n  \"error\": \"Internal server error\",\n  \"message\": \"An unexpected error occurred\"\n}\n</code></pre>"},{"location":"api-reference/#examples","title":"Examples","text":""},{"location":"api-reference/#basic-get-request","title":"Basic GET Request","text":"<pre><code>curl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n</code></pre>"},{"location":"api-reference/#post-request-with-headers","title":"POST Request with Headers","text":"<pre><code>curl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h&amp;method=POST\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Doe\", \"email\": \"john@example.com\"}'\n</code></pre>"},{"location":"api-reference/#custom-subdomain","title":"Custom Subdomain","text":"<pre><code>curl \"https://myapp123.dejafoo.io?url=https://api.example.com/data&amp;ttl=7d\"\n</code></pre>"},{"location":"api-reference/#with-custom-headers","title":"With Custom Headers","text":"<pre><code>curl \"https://myapp123.dejafoo.io?url=https://api.example.com/protected&amp;ttl=30m&amp;headers=%7B%22Authorization%22%3A%22Bearer%20token%22%7D\"\n</code></pre>"},{"location":"api-reference/#ttl-format","title":"TTL Format","text":"<p>The <code>ttl</code> parameter accepts various time formats:</p> Format Description Examples <code>Xs</code> Seconds <code>30s</code>, <code>60s</code> <code>Xm</code> Minutes <code>5m</code>, <code>30m</code> <code>Xh</code> Hours <code>1h</code>, <code>24h</code> <code>Xd</code> Days <code>1d</code>, <code>7d</code> <code>Xw</code> Weeks <code>1w</code>, <code>2w</code>"},{"location":"api-reference/#cache-behavior","title":"Cache Behavior","text":""},{"location":"api-reference/#cache-key-generation","title":"Cache Key Generation","text":"<p>Cache keys are generated using a SHA-256 hash of the following data: - Subdomain (for isolation) - HTTP method - Target URL - Query parameters - Request payload (if any) - TTL value</p> <p>The key is generated as: <code>SHA256(subdomain:method:url:queryParams:payload:ttl)</code></p> <p>This ensures: - Unique keys for different requests - Consistent keys for identical requests - Collision-resistant hashing - Privacy - keys don't expose sensitive data</p>"},{"location":"api-reference/#cache-isolation","title":"Cache Isolation","text":"<p>Different subdomains create separate cache stores:</p> <pre><code># These won't share cache entries\ncurl \"https://app1.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://app2.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"},{"location":"api-reference/#cache-expiration","title":"Cache Expiration","text":"<ul> <li>Cached responses expire after the specified TTL</li> <li>Expired entries are automatically removed</li> <li>New requests to expired entries will fetch fresh data</li> </ul>"},{"location":"api-reference/#large-file-handling","title":"Large File Handling","text":"<p>For responses larger than 1MB: - Data is automatically stored in S3 - Response includes <code>x-cache-storage: s3</code> header - S3 storage is transparent to the client</p>"},{"location":"api-reference/#monitoring","title":"Monitoring","text":""},{"location":"api-reference/#health-check","title":"Health Check","text":"<pre><code>curl \"https://myapp123.dejafoo.io/health\"\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"version\": \"1.0.0\"\n}\n</code></pre></p>"},{"location":"api-reference/#metrics","title":"Metrics","text":"<p>Monitor your usage through: - Response headers (<code>x-cache</code> status) - CloudWatch logs (for self-hosted) - API Gateway metrics</p>"},{"location":"api-reference/#sdks-and-libraries","title":"SDKs and Libraries","text":""},{"location":"api-reference/#javascriptnodejs","title":"JavaScript/Node.js","text":"<pre><code>const dejafoo = require('dejafoo-client');\n\nconst client = new dejafoo.Client('https://myapp123.dejafoo.io');\n\n// Cache an API response\nconst response = await client.get('https://api.example.com/users', {\n  ttl: '1h',\n  subdomain: 'myapp'\n});\n</code></pre>"},{"location":"api-reference/#python","title":"Python","text":"<pre><code>import requests\n\ndef cache_request(url, ttl='30s', subdomain='api'):\n    response = requests.get(f'https://{subdomain}.dejafoo.io', params={\n        'url': url,\n        'ttl': ttl\n    })\n    return response.json()\n</code></pre>"},{"location":"api-reference/#curl","title":"cURL","text":"<pre><code># Simple caching\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# With custom headers\ncurl -H \"Authorization: Bearer token\" \\\n  \"https://myapp123.dejafoo.io?url=https://api.example.com/protected&amp;ttl=30m\"\n</code></pre>"},{"location":"api-reference/#rate-limiting","title":"Rate Limiting","text":""},{"location":"api-reference/#hosted-version","title":"Hosted Version","text":"<ul> <li>1000 requests/hour per IP address</li> <li>Rate limit headers included in responses</li> <li>429 status code when limit exceeded</li> </ul>"},{"location":"api-reference/#self-hosted","title":"Self-Hosted","text":"<ul> <li>No built-in rate limiting</li> <li>AWS API Gateway limits apply</li> <li>Can be configured with API Gateway throttling</li> </ul>"},{"location":"api-reference/#security-considerations","title":"Security Considerations","text":"<ul> <li>All requests are logged</li> <li>HTTPS is enforced</li> <li>No authentication required (public service)</li> <li>Subdomain isolation prevents data leakage</li> <li>S3 encryption for cached data</li> </ul>"},{"location":"api-reference/endpoints/","title":"API Endpoints","text":"<p>Complete reference for all Dejafoo API endpoints.</p>"},{"location":"api-reference/endpoints/#base-urls","title":"Base URLs","text":"<ul> <li>Hosted Version: <code>https://{your-random-string}.dejafoo.io</code></li> <li>Custom Domain: <code>https://{your-random-string}.yourdomain.com</code></li> <li>API Gateway Direct: <code>https://your-api-id.execute-api.region.amazonaws.com/prod</code></li> </ul>"},{"location":"api-reference/endpoints/#main-proxy-endpoint","title":"Main Proxy Endpoint","text":""},{"location":"api-reference/endpoints/#get","title":"GET /","text":"<p>The main proxy endpoint that caches upstream API responses.</p> <p>URL: <code>https://{your-random-string}.dejafoo.io</code></p> <p>Query Parameters:</p> Parameter Type Required Description Example <code>url</code> string Yes The upstream API endpoint to cache <code>https://api.example.com/users</code> <code>ttl</code> string Yes Time-to-live for the cache <code>30s</code>, <code>1h</code>, <code>7d</code> <code>method</code> string No HTTP method (default: GET) <code>POST</code>, <code>PUT</code>, <code>DELETE</code> <code>headers</code> string No JSON-encoded headers <code>{\"Authorization\": \"Bearer token\"}</code> <p>Example Request:</p> <pre><code>curl \"https://{your-random-string}.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\nx-cache: HIT\nx-cache-key: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456\nx-cache-ttl: 30\nx-cache-expires: 2024-01-01T12:00:30Z\n\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"delectus aut autem\",\n  \"completed\": false\n}\n</code></pre>"},{"location":"api-reference/endpoints/#health-check-endpoint","title":"Health Check Endpoint","text":""},{"location":"api-reference/endpoints/#get-health","title":"GET /health","text":"<p>Check the health status of the Dejafoo service.</p> <p>URL: <code>https://myapp123.dejafoo.io/health</code></p> <p>Example Request:</p> <pre><code>curl \"https://myapp123.dejafoo.io/health\"\n</code></pre> <p>Example Response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 86400\n}\n</code></pre>"},{"location":"api-reference/endpoints/#subdomain-endpoints","title":"Subdomain Endpoints","text":""},{"location":"api-reference/endpoints/#wildcard-subdomain-support","title":"Wildcard Subdomain Support","text":"<p>Dejafoo supports wildcard subdomains for cache isolation:</p> <ul> <li><code>https://app1.dejafoo.io</code> - Isolated cache store</li> <li><code>https://app2.dejafoo.io</code> - Separate cache store</li> <li><code>https://myapp.dejafoo.io</code> - Custom app cache store</li> </ul> <p>Example:</p> <pre><code># These won't share cache entries\ncurl \"https://app1.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://app2.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"},{"location":"api-reference/endpoints/#http-methods","title":"HTTP Methods","text":""},{"location":"api-reference/endpoints/#get-requests","title":"GET Requests","text":"<p>Standard GET requests for retrieving data:</p> <pre><code>curl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"},{"location":"api-reference/endpoints/#post-requests","title":"POST Requests","text":"<p>POST requests with request body:</p> <pre><code>curl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Doe\", \"email\": \"john@example.com\"}'\n</code></pre>"},{"location":"api-reference/endpoints/#put-requests","title":"PUT Requests","text":"<p>PUT requests for updating resources:</p> <pre><code>curl -X PUT \"https://myapp123.dejafoo.io?url=https://api.example.com/users/1&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Updated\", \"email\": \"john.updated@example.com\"}'\n</code></pre>"},{"location":"api-reference/endpoints/#delete-requests","title":"DELETE Requests","text":"<p>DELETE requests for removing resources:</p> <pre><code>curl -X DELETE \"https://myapp123.dejafoo.io?url=https://api.example.com/users/1&amp;ttl=1h\"\n</code></pre>"},{"location":"api-reference/endpoints/#request-headers","title":"Request Headers","text":""},{"location":"api-reference/endpoints/#custom-headers","title":"Custom Headers","text":"<p>Pass custom headers to the upstream API:</p> <pre><code>curl \"https://myapp123.dejafoo.io?url=https://api.example.com/protected&amp;ttl=30m\" \\\n  -H \"Authorization: Bearer your-token\" \\\n  -H \"X-Custom-Header: value\"\n</code></pre>"},{"location":"api-reference/endpoints/#upstream-url-override","title":"Upstream URL Override","text":"<p>Override the default upstream service:</p> <pre><code>curl -H \"X-Upstream-URL: https://api.other.com\" \\\n  \"https://myapp123.dejafoo.io?url=/users&amp;ttl=1h\"\n</code></pre>"},{"location":"api-reference/endpoints/#response-headers","title":"Response Headers","text":""},{"location":"api-reference/endpoints/#cache-headers","title":"Cache Headers","text":"Header Description Example <code>x-cache</code> Cache status <code>HIT</code>, <code>MISS</code> <code>x-cache-key</code> Cache key used (SHA-256 hash) <code>a1b2c3d4e5f6...</code> <code>x-cache-ttl</code> TTL in seconds <code>3600</code> <code>x-cache-expires</code> Expiration timestamp <code>2024-01-01T12:00:00Z</code> <code>x-cache-storage</code> Storage backend <code>s3</code> (for large files)"},{"location":"api-reference/endpoints/#standard-headers","title":"Standard Headers","text":"<p>Standard HTTP headers are passed through from the upstream API:</p> <ul> <li><code>Content-Type</code></li> <li><code>Content-Length</code></li> <li><code>Last-Modified</code></li> <li><code>ETag</code></li> <li><code>Cache-Control</code></li> </ul>"},{"location":"api-reference/endpoints/#error-responses","title":"Error Responses","text":""},{"location":"api-reference/endpoints/#400-bad-request","title":"400 Bad Request","text":"<p>Invalid request parameters:</p> <pre><code>HTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{\n  \"error\": \"Invalid TTL format\",\n  \"message\": \"TTL must be in format like '30s', '1h', '7d'\",\n  \"code\": \"INVALID_TTL\"\n}\n</code></pre>"},{"location":"api-reference/endpoints/#404-not-found","title":"404 Not Found","text":"<p>Upstream service not found:</p> <pre><code>HTTP/1.1 404 Not Found\nContent-Type: application/json\n\n{\n  \"error\": \"Upstream service not found\",\n  \"message\": \"Could not reach https://api.example.com/nonexistent\",\n  \"code\": \"UPSTREAM_NOT_FOUND\"\n}\n</code></pre>"},{"location":"api-reference/endpoints/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Unexpected server error:</p> <pre><code>HTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\n{\n  \"error\": \"Internal server error\",\n  \"message\": \"An unexpected error occurred\",\n  \"code\": \"INTERNAL_ERROR\"\n}\n</code></pre>"},{"location":"api-reference/endpoints/#502-bad-gateway","title":"502 Bad Gateway","text":"<p>Upstream service error:</p> <pre><code>HTTP/1.1 502 Bad Gateway\nContent-Type: application/json\n\n{\n  \"error\": \"Bad gateway\",\n  \"message\": \"Upstream service returned an error\",\n  \"code\": \"BAD_GATEWAY\"\n}\n</code></pre>"},{"location":"api-reference/endpoints/#rate-limiting","title":"Rate Limiting","text":""},{"location":"api-reference/endpoints/#hosted-version","title":"Hosted Version","text":"<ul> <li>Rate Limit: 1000 requests/hour per IP</li> <li>Headers: Rate limit information in response headers</li> <li>Status Code: 429 when limit exceeded</li> </ul> <pre><code>HTTP/1.1 429 Too Many Requests\nContent-Type: application/json\nX-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1640995200\n\n{\n  \"error\": \"Rate limit exceeded\",\n  \"message\": \"Too many requests. Try again later.\",\n  \"code\": \"RATE_LIMIT_EXCEEDED\"\n}\n</code></pre>"},{"location":"api-reference/endpoints/#self-hosted","title":"Self-Hosted","text":"<ul> <li>No Built-in Limits: No rate limiting by default</li> <li>AWS Limits: API Gateway throttling may apply</li> <li>Custom Throttling: Can be configured with API Gateway</li> </ul>"},{"location":"api-reference/endpoints/#cors-support","title":"CORS Support","text":""},{"location":"api-reference/endpoints/#cors-headers","title":"CORS Headers","text":"<p>Dejafoo includes CORS headers for cross-origin requests:</p> <pre><code>HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS\nAccess-Control-Allow-Headers: Content-Type, Authorization, X-Upstream-URL\n</code></pre>"},{"location":"api-reference/endpoints/#preflight-requests","title":"Preflight Requests","text":"<p>OPTIONS requests are handled automatically:</p> <pre><code>curl -X OPTIONS \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"},{"location":"api-reference/endpoints/#websocket-support","title":"WebSocket Support","text":"<p>WebSocket connections are not currently supported. Only HTTP/HTTPS requests are supported.</p>"},{"location":"api-reference/endpoints/#api-versioning","title":"API Versioning","text":"<p>Currently, there is no API versioning. All endpoints use the latest version.</p>"},{"location":"api-reference/endpoints/#sdk-examples","title":"SDK Examples","text":""},{"location":"api-reference/endpoints/#javascriptnodejs","title":"JavaScript/Node.js","text":"<pre><code>const axios = require('axios');\n\nclass DejafooClient {\n  constructor(baseUrl = 'https://myapp123.dejafoo.io') {\n    this.baseUrl = baseUrl;\n  }\n\n  async get(url, options = {}) {\n    const params = {\n      url,\n      ttl: options.ttl || '1h',\n      method: options.method || 'GET'\n    };\n\n    if (options.headers) {\n      params.headers = JSON.stringify(options.headers);\n    }\n\n    const response = await axios.get(this.baseUrl, { params });\n    return response.data;\n  }\n}\n\n// Usage\nconst client = new DejafooClient();\nconst data = await client.get('https://api.example.com/users', { ttl: '30m' });\n</code></pre>"},{"location":"api-reference/endpoints/#python","title":"Python","text":"<pre><code>import requests\nimport json\n\nclass DejafooClient:\n    def __init__(self, base_url='https://myapp123.dejafoo.io'):\n        self.base_url = base_url\n\n    def get(self, url, ttl='1h', method='GET', headers=None):\n        params = {\n            'url': url,\n            'ttl': ttl,\n            'method': method\n        }\n\n        if headers:\n            params['headers'] = json.dumps(headers)\n\n        response = requests.get(self.base_url, params=params)\n        return response.json()\n\n# Usage\nclient = DejafooClient()\ndata = client.get('https://api.example.com/users', ttl='30m')\n</code></pre>"},{"location":"api-reference/endpoints/#curl","title":"cURL","text":"<pre><code># Basic usage\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# With custom headers\ncurl -H \"Authorization: Bearer token\" \\\n  \"https://myapp123.dejafoo.io?url=https://api.example.com/protected&amp;ttl=30m\"\n\n# POST request\ncurl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Doe\"}'\n</code></pre>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This guide covers deploying Dejafoo infrastructure and code using the two-phase deployment strategy.</p>"},{"location":"deployment/#overview","title":"Overview","text":"<p>Dejafoo uses a two-phase deployment strategy to handle SSL certificate validation and nameserver updates:</p> <ol> <li>Phase 1: Core infrastructure (Lambda, API Gateway, S3)</li> <li>Phase 2: DNS and SSL configuration (after nameserver update)</li> <li>Code Deployment: Regular Lambda function updates</li> </ol>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS CLI configured with appropriate permissions</li> <li>Terraform &gt;= 1.0</li> <li>Node.js &gt;= 18</li> <li>Domain name (optional, but recommended)</li> </ul>"},{"location":"deployment/#phase-1-core-infrastructure","title":"Phase 1: Core Infrastructure","text":""},{"location":"deployment/#what-phase-1-creates","title":"What Phase 1 Creates","text":"<ul> <li>Lambda function with IAM roles</li> <li>API Gateway (Regional endpoints)</li> <li>S3 bucket for caching</li> <li>Route53 hosted zone (if domain provided)</li> <li>No SSL certificates - avoids validation issues</li> </ul>"},{"location":"deployment/#deploy-phase-1","title":"Deploy Phase 1","text":"<pre><code>cd infra\n./phase1.sh\n</code></pre>"},{"location":"deployment/#phase-1-outputs","title":"Phase 1 Outputs","text":"<p>After successful deployment, note these outputs: - Nameservers: Update these at your domain registrar - API Gateway URL: For testing before custom domain - S3 Bucket Name: For cache storage</p>"},{"location":"deployment/#phase-2-dns-ssl","title":"Phase 2: DNS &amp; SSL","text":""},{"location":"deployment/#prerequisites-for-phase-2","title":"Prerequisites for Phase 2","text":"<ol> <li>Update Nameservers: Use the nameservers from Phase 1</li> <li>Wait for DNS Propagation: 5-60 minutes</li> <li>Verify Nameserver Update:    <pre><code>nslookup -type=NS yourdomain.com\n</code></pre></li> </ol>"},{"location":"deployment/#what-phase-2-creates","title":"What Phase 2 Creates","text":"<ul> <li>SSL certificate with DNS validation</li> <li>DNS records (A, CNAME)</li> <li>API Gateway custom domain configuration</li> <li>Certificate validation records</li> </ul>"},{"location":"deployment/#deploy-phase-2","title":"Deploy Phase 2","text":"<pre><code>./phase2.sh\n</code></pre>"},{"location":"deployment/#code-deployment","title":"Code Deployment","text":""},{"location":"deployment/#deploy-lambda-code","title":"Deploy Lambda Code","text":"<pre><code>cd ..\n./deploy-code.sh\n</code></pre> <p>This script: - Packages <code>src/index.js</code> and dependencies - Updates existing Lambda function code - Preserves all infrastructure and environment variables</p>"},{"location":"deployment/#code-deployment-workflow","title":"Code Deployment Workflow","text":"<pre><code># 1. Make code changes\nvim src/index.js\n\n# 2. Deploy changes\n./deploy-code.sh\n\n# 3. Test changes\nnode tests/test-production.js\n</code></pre>"},{"location":"deployment/#testing-deployment","title":"Testing Deployment","text":""},{"location":"deployment/#comprehensive-test-suite","title":"Comprehensive Test Suite","text":"<pre><code># Run full production test suite\nnode tests/test-production.js\n</code></pre>"},{"location":"deployment/#manual-testing","title":"Manual Testing","text":"<pre><code># Test with custom domain\ncurl \"https://api.yourdomain.com?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n\n# Test API Gateway directly\ncurl \"https://your-api-id.execute-api.region.amazonaws.com/prod?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n</code></pre>"},{"location":"deployment/#deployment-types","title":"Deployment Types","text":""},{"location":"deployment/#infrastructure-deployment-rare","title":"Infrastructure Deployment (Rare)","text":"<p>When to use: Initial setup, infrastructure changes, scaling</p> <pre><code>cd infra\n./phase1.sh    # If core infrastructure changes\n./phase2.sh    # If DNS/SSL changes\n</code></pre>"},{"location":"deployment/#code-deployment-frequent","title":"Code Deployment (Frequent)","text":"<p>When to use: Code changes, bug fixes, feature updates</p> <pre><code>./deploy-code.sh\n</code></pre>"},{"location":"deployment/#dns-configuration-one-time","title":"DNS Configuration (One-time)","text":"<p>When to use: After Phase 1 infrastructure deployment</p> <ul> <li>Update nameservers at domain registrar</li> <li>Wait for DNS propagation</li> <li>Proceed with Phase 2</li> </ul>"},{"location":"deployment/#environment-configuration","title":"Environment Configuration","text":""},{"location":"deployment/#terraform-variables","title":"Terraform Variables","text":"<p>Edit <code>infra/phase1/terraform.tfvars</code>:</p> <pre><code>aws_region = \"eu-west-3\"        # Your preferred AWS region\nenvironment = \"prod\"            # Environment name\ndomain_name = \"yourdomain.com\"  # Your domain (optional)\n</code></pre>"},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<p>The Lambda function uses these environment variables:</p> <ul> <li><code>S3_BUCKET_NAME</code>: S3 bucket for cache storage</li> <li><code>UPSTREAM_BASE_URL</code>: Default upstream service URL</li> <li><code>CACHE_TTL_SECONDS</code>: Cache time-to-live in seconds</li> <li><code>NODE_ENV</code>: Set to \"production\"</li> </ul>"},{"location":"deployment/#monitoring-deployment","title":"Monitoring Deployment","text":""},{"location":"deployment/#cloudwatch-logs","title":"CloudWatch Logs","text":"<pre><code># View Lambda logs\naws logs describe-log-groups --log-group-name-prefix \"/aws/lambda/dejafoo\"\n\n# Get recent log events\naws logs get-log-events --log-group-name \"/aws/lambda/dejafoo-proxy-prod\" --log-stream-name \"latest\"\n</code></pre>"},{"location":"deployment/#health-checks","title":"Health Checks","text":"<pre><code># Check API Gateway health\ncurl \"https://api.yourdomain.com/health\"\n\n# Check Lambda function\naws lambda invoke --function-name dejafoo-proxy-prod response.json\n</code></pre>"},{"location":"deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/#phase-1-issues","title":"Phase 1 Issues","text":"<ol> <li> <p>IAM Role Conflicts <pre><code># Delete existing roles manually\naws iam delete-role-policy --role-name dejafoo-lambda-role --policy-name dejafoo-lambda-policy\naws iam delete-role --role-name dejafoo-lambda-role\n</code></pre></p> </li> <li> <p>S3 Bucket Conflicts</p> </li> <li>S3 bucket names must be globally unique</li> <li> <p>Change the bucket name in <code>terraform.tfvars</code></p> </li> <li> <p>CloudWatch Log Groups <pre><code># Delete existing log groups\naws logs delete-log-group --log-group-name \"/aws/lambda/dejafoo-proxy-prod\"\n</code></pre></p> </li> </ol>"},{"location":"deployment/#phase-2-issues","title":"Phase 2 Issues","text":"<ol> <li>SSL Certificate Validation</li> <li>Ensure nameservers are updated before Phase 2</li> <li>Wait for DNS propagation (5-60 minutes)</li> <li> <p>Check with: <code>nslookup -type=NS yourdomain.com</code></p> </li> <li> <p>DNS Propagation</p> </li> <li>Wait 5-60 minutes for DNS changes</li> <li> <p>Use <code>dig</code> or <code>nslookup</code> to verify</p> </li> <li> <p>Certificate ARN</p> </li> <li>Check certificate is in correct region (eu-west-3)</li> <li>Verify certificate status in AWS Console</li> </ol>"},{"location":"deployment/#code-deployment-issues","title":"Code Deployment Issues","text":"<ol> <li>Lambda Function Not Found</li> <li>Run Phase 1 first to create the function</li> <li> <p>Check function name in AWS Console</p> </li> <li> <p>Permission Denied</p> </li> <li>Check AWS credentials and profile</li> <li> <p>Verify IAM permissions</p> </li> <li> <p>Package Size</p> </li> <li>Ensure deployment package is under Lambda limits (50MB zipped)</li> <li>Check <code>node_modules</code> size</li> </ol>"},{"location":"deployment/#cleanup","title":"Cleanup","text":""},{"location":"deployment/#remove-all-resources","title":"Remove All Resources","text":"<pre><code>cd infra/phase2\nterraform destroy\n\ncd ../phase1\nterraform destroy\n</code></pre> <p>Warning: This will permanently delete all resources including data in S3.</p>"},{"location":"deployment/#partial-cleanup","title":"Partial Cleanup","text":"<pre><code># Remove only Phase 2 resources\ncd infra/phase2\nterraform destroy\n\n# Remove only code (keep infrastructure)\n# No specific command - just don't run deploy-code.sh\n</code></pre>"},{"location":"deployment/#best-practices","title":"Best Practices","text":""},{"location":"deployment/#deployment-workflow","title":"Deployment Workflow","text":"<ol> <li>Test Locally: Make changes and test locally</li> <li>Deploy Code: Use <code>./deploy-code.sh</code> for code changes</li> <li>Test Production: Run <code>node tests/test-production.js</code></li> <li>Monitor: Check CloudWatch logs and metrics</li> </ol>"},{"location":"deployment/#infrastructure-changes","title":"Infrastructure Changes","text":"<ol> <li>Plan Changes: Use <code>terraform plan</code> before applying</li> <li>Backup State: Keep Terraform state files safe</li> <li>Test in Dev: Use different environment names for testing</li> <li>Document Changes: Update documentation for infrastructure changes</li> </ol>"},{"location":"deployment/#security","title":"Security","text":"<ul> <li>Use least-privilege IAM roles</li> <li>Enable CloudTrail for audit logging</li> <li>Regularly update dependencies</li> <li>Monitor for security vulnerabilities</li> </ul>"},{"location":"deployment/#regional-considerations","title":"Regional Considerations","text":""},{"location":"deployment/#supported-regions","title":"Supported Regions","text":"<ul> <li>eu-west-3 (Paris) - Default</li> <li>us-east-1 (N. Virginia)</li> <li>us-west-2 (Oregon)</li> <li>ap-southeast-1 (Singapore)</li> </ul>"},{"location":"deployment/#regional-endpoints","title":"Regional Endpoints","text":"<p>This deployment uses regional API Gateway endpoints:</p> <ul> <li>No CloudFront: Requests go directly to your specified region</li> <li>Simplified Caching: Your custom S3-based caching works without CloudFront interference</li> <li>Lower Latency: For users in your region, requests are faster</li> <li>Simpler Architecture: Fewer moving parts, easier to debug</li> </ul>"},{"location":"development/","title":"Development","text":"<p>This section covers development, architecture, and contribution guidelines for Dejafoo.</p>"},{"location":"development/#architecture","title":"Architecture","text":""},{"location":"development/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    A[Client] --&gt; B[Route53]\n    B --&gt; C[API Gateway]\n    C --&gt; D[Lambda Function]\n    D --&gt; E[Upstream API]\n    D --&gt; F[S3 Cache]\n\n    subgraph \"AWS Lambda\"\n        D --&gt; G[Cache Logic]\n        D --&gt; H[Request Handler]\n    end\n\n    subgraph \"S3 Storage\"\n        F --&gt; I[Cache Objects]\n        F --&gt; J[Metadata]\n    end\n\n    style A fill:#e1f5fe\n    style E fill:#f3e5f5\n    style F fill:#e8f5e8</code></pre>"},{"location":"development/#two-phase-deployment-strategy","title":"Two-Phase Deployment Strategy","text":"<p>The infrastructure is split into two phases to handle SSL certificate validation:</p> <p>Phase 1 (Core Infrastructure): - Creates S3 bucket for caching - Creates Lambda function with IAM roles - Creates API Gateway (without custom domain) - Creates Route53 hosted zone and outputs nameservers - No SSL certificates - avoids validation issues</p> <p>Phase 2 (DNS &amp; SSL): - Creates SSL certificates with DNS validation - Creates DNS records for custom domain - Configures API Gateway custom domain - Requires: Nameservers updated at domain registrar</p>"},{"location":"development/#directory-structure","title":"Directory Structure","text":"<pre><code>dejafoo/\n\u251c\u2500\u2500 src/                  # Source code\n\u2502   \u2514\u2500\u2500 index.js         # Lambda function handler\n\u251c\u2500\u2500 package.json          # Node.js dependencies\n\u251c\u2500\u2500 deploy-code.sh        # Lambda code deployment script\n\u251c\u2500\u2500 tests/                # Test files\n\u2502   \u2514\u2500\u2500 test-production.js # Comprehensive production test suite\n\u251c\u2500\u2500 infra/                # Terraform infrastructure\n\u2502   \u251c\u2500\u2500 phase1.sh        # Phase 1 deployment script\n\u2502   \u251c\u2500\u2500 phase2.sh        # Phase 2 deployment script\n\u2502   \u251c\u2500\u2500 phase1/          # Phase 1 Terraform configuration\n\u2502   \u2502   \u251c\u2500\u2500 core.tf      # Phase 1 main configuration\n\u2502   \u2502   \u251c\u2500\u2500 terraform.tfvars # Phase 1 variables\n\u2502   \u2502   \u2514\u2500\u2500 modules/     # Phase 1 modules (no SSL)\n\u2502   \u2502       \u251c\u2500\u2500 apigateway/  # API Gateway without custom domain\n\u2502   \u2502       \u251c\u2500\u2500 lambda/      # Lambda function setup\n\u2502   \u2502       \u251c\u2500\u2500 s3/          # S3 bucket for cache\n\u2502   \u2502       \u2514\u2500\u2500 route53/     # Route53 zone only (no SSL)\n\u2502   \u2514\u2500\u2500 phase2/          # Phase 2 Terraform configuration\n\u2502       \u251c\u2500\u2500 dns.tf       # Phase 2 main configuration\n\u2502       \u251c\u2500\u2500 dns.tfvars   # Phase 2 variables (auto-generated)\n\u2502       \u2514\u2500\u2500 modules/     # Phase 2 modules (with SSL)\n\u2502           \u251c\u2500\u2500 apigateway/  # API Gateway with custom domain\n\u2502           \u251c\u2500\u2500 lambda/      # Lambda function setup\n\u2502           \u251c\u2500\u2500 s3/          # S3 bucket for cache\n\u2502           \u2514\u2500\u2500 route53/     # Route53 with SSL certificates\n\u2514\u2500\u2500 docs/                 # Documentation\n    \u251c\u2500\u2500 mkdocs.yml       # MkDocs configuration\n    \u2514\u2500\u2500 ...              # Documentation files\n</code></pre>"},{"location":"development/#code-style","title":"Code Style","text":""},{"location":"development/#javascript","title":"JavaScript","text":"<ul> <li>ES6+: Use modern JavaScript features</li> <li>Async/Await: Prefer async/await over callbacks</li> <li>Error Handling: Comprehensive error handling</li> <li>Comments: Inline comments for complex logic</li> </ul>"},{"location":"development/#terraform","title":"Terraform","text":"<ul> <li>HCL2: Use HCL2 syntax</li> <li>Naming: Consistent naming conventions</li> <li>Modules: Modular structure for reusability</li> <li>Variables: Use variables for configuration</li> </ul>"},{"location":"development/#testing","title":"Testing","text":"<ul> <li>Comprehensive: Full test coverage</li> <li>Clear Output: Pass/fail indicators</li> <li>Production: Test against production environment</li> <li>Isolation: Test subdomain isolation</li> </ul>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#local-development","title":"Local Development","text":"<ol> <li> <p>Clone Repository:    <pre><code>git clone https://github.com/camrail/dejafoo.git\ncd dejafoo\n</code></pre></p> </li> <li> <p>Install Dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Make Changes:    <pre><code>vim src/index.js\n</code></pre></p> </li> <li> <p>Test Locally:    <pre><code>node tests/test-production.js\n</code></pre></p> </li> <li> <p>Deploy Changes:    <pre><code>./deploy-code.sh\n</code></pre></p> </li> </ol>"},{"location":"development/#testing-strategy","title":"Testing Strategy","text":"<p>The project uses a comprehensive test suite that covers:</p> <ul> <li>Basic Functionality: HTTP proxy and response handling</li> <li>Subdomain Isolation: Ensures different subdomains don't leak data</li> <li>Cache Behavior: Hit/miss patterns with TTL validation</li> <li>Header-based Caching: Different headers create separate cache entries</li> <li>Method Support: GET, POST, PUT, DELETE methods</li> <li>Data Leakage Prevention: Sensitive data isolation between subdomains</li> <li>Error Handling: Graceful handling of invalid URLs and errors</li> <li>Concurrent Requests: Multiple simultaneous request handling</li> <li>TTL Functionality: Cache expiration and refresh behavior</li> <li>S3 Integration: Large payload handling and cache storage</li> </ul>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run comprehensive test suite\nnode tests/test-production.js\n\n# Test specific functionality\nnode -e \"\nconst tests = require('./tests/test-production.js');\ntests.runBasicFunctionalityTests();\n\"\n</code></pre>"},{"location":"development/#architecture-details","title":"Architecture Details","text":""},{"location":"development/#lambda-function","title":"Lambda Function","text":"<p>The Lambda function (<code>src/index.js</code>) handles:</p> <ol> <li>Request Parsing: Extract URL, TTL, and other parameters</li> <li>Cache Key Generation: Create unique cache keys</li> <li>Cache Lookup: Check S3 for existing cached responses</li> <li>Upstream Request: Fetch from upstream if cache miss</li> <li>Cache Storage: Store response in S3 for future requests</li> <li>Response Formatting: Return properly formatted response</li> </ol>"},{"location":"development/#cache-strategy","title":"Cache Strategy","text":"<ul> <li>S3 Storage: All cache data stored in S3</li> <li>Key Generation: Based on subdomain, URL, method, headers</li> <li>TTL Management: Automatic expiration based on TTL parameter</li> <li>Large Files: Automatic S3 fallback for files &gt;1MB</li> </ul>"},{"location":"development/#security-model","title":"Security Model","text":"<ul> <li>IAM Roles: Minimal required permissions</li> <li>S3 Encryption: Server-side encryption for cache storage</li> <li>SSL/TLS: Automatic SSL certificate management</li> <li>Subdomain Isolation: Separate cache stores per subdomain</li> </ul>"},{"location":"development/#contributing","title":"Contributing","text":""},{"location":"development/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the Repository</li> <li>Create Feature Branch: <code>git checkout -b feature/amazing-feature</code></li> <li>Make Changes: Follow code style guidelines</li> <li>Test Changes: Run test suite</li> <li>Submit Pull Request: Include description of changes</li> </ol>"},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update Documentation: Update relevant documentation</li> <li>Add Tests: Add tests for new functionality</li> <li>Update Tests: Update existing tests if needed</li> <li>Test Deployment: Test deployment process</li> <li>Submit PR: Include clear description and testing steps</li> </ol>"},{"location":"development/#code-review","title":"Code Review","text":"<ul> <li>Automated Tests: All tests must pass</li> <li>Code Style: Follow established patterns</li> <li>Documentation: Update relevant documentation</li> <li>Security: Review security implications</li> <li>Performance: Consider performance impact</li> </ul>"},{"location":"development/#aws-resources","title":"AWS Resources","text":""},{"location":"development/#lambda-function_1","title":"Lambda Function","text":"<ul> <li>Name: <code>dejafoo-proxy-prod</code></li> <li>Runtime: Node.js 18.x</li> <li>Memory: 256 MB</li> <li>Timeout: 30 seconds</li> <li>Environment: Production</li> </ul>"},{"location":"development/#api-gateway","title":"API Gateway","text":"<ul> <li>Type: Regional endpoints</li> <li>Custom Domain: Optional</li> <li>CORS: Enabled</li> <li>Throttling: None (self-hosted)</li> </ul>"},{"location":"development/#s3-bucket","title":"S3 Bucket","text":"<ul> <li>Purpose: Cache storage</li> <li>Encryption: Server-side encryption</li> <li>Lifecycle: Automatic cleanup of expired objects</li> <li>Access: Lambda function only</li> </ul>"},{"location":"development/#route53","title":"Route53","text":"<ul> <li>Hosted Zone: For custom domain</li> <li>DNS Records: A, CNAME records</li> <li>SSL Certificate: ACM certificate with DNS validation</li> </ul>"},{"location":"development/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>S3_BUCKET_NAME</code> S3 bucket for cache storage Required <code>UPSTREAM_BASE_URL</code> Default upstream service URL Optional <code>CACHE_TTL_SECONDS</code> Default cache TTL in seconds 3600 <code>NODE_ENV</code> Node environment production"},{"location":"development/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/#lambda-performance","title":"Lambda Performance","text":"<ul> <li>Cold Start: ~200-500ms</li> <li>Warm Request: ~50-100ms</li> <li>Cache Hit: ~20-50ms</li> <li>Throughput: 1000+ requests/second</li> </ul>"},{"location":"development/#s3-performance","title":"S3 Performance","text":"<ul> <li>Read Latency: ~10-50ms</li> <li>Write Latency: ~50-100ms</li> <li>Throughput: High (S3 scales automatically)</li> </ul>"},{"location":"development/#api-gateway-performance","title":"API Gateway Performance","text":"<ul> <li>Regional Endpoints: Lower latency than edge</li> <li>No CloudFront: Simplified caching</li> <li>Direct Lambda: No additional latency</li> </ul>"},{"location":"development/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"development/#cloudwatch-logs","title":"CloudWatch Logs","text":"<pre><code># View Lambda logs\naws logs describe-log-groups --log-group-name-prefix \"/aws/lambda/dejafoo\"\n\n# Get recent log events\naws logs get-log-events --log-group-name \"/aws/lambda/dejafoo-proxy-prod\" --log-stream-name \"latest\"\n</code></pre>"},{"location":"development/#debug-commands","title":"Debug Commands","text":"<pre><code># Test API Gateway directly\ncurl -v \"https://your-api-id.execute-api.region.amazonaws.com/prod?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n\n# Check Lambda function\naws lambda invoke --function-name dejafoo-proxy-prod response.json\n\n# Test local development\nnode tests/test-production.js\n</code></pre>"},{"location":"development/#common-issues","title":"Common Issues","text":""},{"location":"development/#ssl-certificate-validation","title":"SSL Certificate Validation","text":"<ul> <li>Problem: Certificate validation fails</li> <li>Solution: Ensure nameservers are updated before Phase 2</li> <li>Check: <code>nslookup -type=NS yourdomain.com</code></li> </ul>"},{"location":"development/#cache-key-consistency","title":"Cache Key Consistency","text":"<ul> <li>Expected: Same request parameters = same cache key</li> <li>TTL behavior: Cache expires, but key remains consistent</li> <li>Test: Verify MISS \u2192 HIT \u2192 MISS pattern</li> </ul>"},{"location":"development/#large-file-handling","title":"Large File Handling","text":"<ul> <li>S3 fallback: Files &gt;1MB automatically use S3</li> <li>Cache headers: Check <code>x-cache</code> header for HIT/MISS status</li> <li>Size validation: Slight size differences in test responses are normal</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to Dejafoo! This section will help you get up and running quickly.</p>"},{"location":"getting-started/#what-is-dejafoo","title":"What is Dejafoo?","text":"<p>Dejafoo is a high-performance HTTP proxy service built with AWS Lambda to cache expensive API endpoints and share between environments. It provides intelligent S3-based caching with configurable TTL and subdomain isolation.</p>"},{"location":"getting-started/#key-features","title":"Key Features","text":"<ul> <li>HTTP Proxy: Forward requests to any upstream service, with repeat requests served from cache</li> <li>Intelligent Caching: S3-based caching with configurable TTL and any-random-string to separate your stores</li> <li>Custom Domain Support: API Gateway with Route53 integration</li> <li>SSL/TLS: Automatic SSL certificate management</li> <li>Regional Endpoints: Direct regional API Gateway</li> <li>High Performance: Serverless architecture with sub-second response times</li> <li>Easy Deployment: One-command infrastructure and code deployment</li> </ul>"},{"location":"getting-started/#quick-start","title":"Quick Start","text":"<p>The fastest way to get started is to use the free hosted version at <code>dejafoo.io</code>:</p> <pre><code># Cache an API response for 30 seconds\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n\n# Use custom subdomain for isolation\ncurl \"https://myapp.dejafoo.io?url=https://api.example.com/data&amp;ttl=1h\"\n</code></pre>"},{"location":"getting-started/#self-hosted-deployment","title":"Self-Hosted Deployment","text":"<p>If you want to deploy your own instance:</p> <ol> <li>Quick Start - 5-minute setup guide</li> <li>Installation - Detailed installation steps</li> <li>Configuration - Configure caching and domains</li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about usage patterns</li> <li>Explore the API reference</li> <li>Set up monitoring</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Learn how to configure Dejafoo for your specific use case.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>The Lambda function uses these environment variables for configuration:</p> Variable Description Default Required <code>S3_BUCKET_NAME</code> S3 bucket for cache storage - Yes <code>UPSTREAM_BASE_URL</code> Default upstream service URL - No <code>CACHE_TTL_SECONDS</code> Default cache TTL in seconds 3600 No <code>NODE_ENV</code> Node environment production No"},{"location":"getting-started/configuration/#terraform-configuration","title":"Terraform Configuration","text":""},{"location":"getting-started/configuration/#phase-1-variables","title":"Phase 1 Variables","text":"<p>Edit <code>infra/phase1/terraform.tfvars</code>:</p> <pre><code># AWS Configuration\naws_region = \"eu-west-3\"        # Your preferred AWS region\nenvironment = \"prod\"            # Environment name (dev, staging, prod)\n\n# Domain Configuration\ndomain_name = \"yourdomain.com\"  # Your domain (optional)\n\n# Lambda Configuration\nlambda_timeout = 30             # Lambda timeout in seconds\nlambda_memory_size = 256        # Lambda memory in MB\n\n# Cache Configuration\ndefault_ttl_seconds = 3600      # Default cache TTL\nmax_cache_size_mb = 1           # Max size before S3 fallback\n</code></pre>"},{"location":"getting-started/configuration/#phase-2-variables","title":"Phase 2 Variables","text":"<p>Phase 2 variables are auto-generated from Phase 1, but you can customize:</p> <pre><code># SSL Configuration\nssl_certificate_validation_timeout = \"10m\"\n\n# DNS Configuration\ndns_ttl = 300                   # DNS record TTL in seconds\n</code></pre>"},{"location":"getting-started/configuration/#cache-configuration","title":"Cache Configuration","text":""},{"location":"getting-started/configuration/#ttl-settings","title":"TTL Settings","text":"<p>Configure default cache TTL in different ways:</p> <pre><code># In terraform.tfvars\ndefault_ttl_seconds = 3600      # 1 hour default\n\n# In Lambda environment\nCACHE_TTL_SECONDS = 7200        # 2 hours default\n</code></pre>"},{"location":"getting-started/configuration/#cache-key-configuration","title":"Cache Key Configuration","text":"<p>Cache keys are generated using: - Subdomain (for isolation) - URL (the upstream endpoint) - HTTP method - Query parameters - Headers (if provided)</p>"},{"location":"getting-started/configuration/#s3-configuration","title":"S3 Configuration","text":"<pre><code># S3 bucket configuration\ns3_bucket_name = \"dejafoo-cache-prod\"\ns3_encryption = true\ns3_lifecycle_enabled = true\ns3_lifecycle_days = 30\n</code></pre>"},{"location":"getting-started/configuration/#domain-configuration","title":"Domain Configuration","text":""},{"location":"getting-started/configuration/#custom-domain-setup","title":"Custom Domain Setup","text":"<ol> <li> <p>Set Domain Name:    <pre><code>domain_name = \"yourdomain.com\"\n</code></pre></p> </li> <li> <p>Deploy Phase 1:    <pre><code>cd infra\n./phase1.sh\n</code></pre></p> </li> <li> <p>Update Nameservers:</p> </li> <li>Use the nameservers from Phase 1 output</li> <li>Update at your domain registrar</li> <li> <p>Wait for DNS propagation (5-60 minutes)</p> </li> <li> <p>Deploy Phase 2:    <pre><code>./phase2.sh\n</code></pre></p> </li> </ol>"},{"location":"getting-started/configuration/#subdomain-configuration","title":"Subdomain Configuration","text":"<p>Dejafoo automatically handles subdomains: - <code>api.yourdomain.com</code> - Main API endpoint - <code>*.yourdomain.com</code> - Wildcard subdomain support - Each subdomain gets isolated cache storage</p>"},{"location":"getting-started/configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"getting-started/configuration/#iam-roles","title":"IAM Roles","text":"<p>The deployment creates minimal IAM roles:</p> <pre><code># Lambda execution role\nlambda_execution_role = \"dejafoo-lambda-role\"\n\n# S3 access policy\ns3_policy = \"dejafoo-s3-policy\"\n\n# API Gateway permissions\napigateway_policy = \"dejafoo-apigateway-policy\"\n</code></pre>"},{"location":"getting-started/configuration/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<pre><code># SSL certificate configuration\nssl_certificate_provider = \"acm\"\nssl_certificate_validation = \"dns\"\nssl_certificate_validation_timeout = \"10m\"\n</code></pre>"},{"location":"getting-started/configuration/#s3-encryption","title":"S3 Encryption","text":"<pre><code># S3 server-side encryption\ns3_encryption_algorithm = \"AES256\"\ns3_encryption_key_management = \"aws\"\n</code></pre>"},{"location":"getting-started/configuration/#performance-configuration","title":"Performance Configuration","text":""},{"location":"getting-started/configuration/#lambda-configuration","title":"Lambda Configuration","text":"<pre><code># Lambda performance settings\nlambda_timeout = 30             # Maximum execution time\nlambda_memory_size = 256        # Memory allocation\nlambda_reserved_concurrency = 100  # Reserved concurrency\n</code></pre>"},{"location":"getting-started/configuration/#api-gateway-configuration","title":"API Gateway Configuration","text":"<pre><code># API Gateway settings\napigateway_type = \"REGIONAL\"    # Regional endpoints\napigateway_throttle_burst = 5000\napigateway_throttle_rate = 2000\n</code></pre>"},{"location":"getting-started/configuration/#s3-performance","title":"S3 Performance","text":"<pre><code># S3 performance settings\ns3_transfer_acceleration = false\ns3_intelligent_tiering = true\n</code></pre>"},{"location":"getting-started/configuration/#monitoring-configuration","title":"Monitoring Configuration","text":""},{"location":"getting-started/configuration/#cloudwatch-logs","title":"CloudWatch Logs","text":"<pre><code># CloudWatch configuration\ncloudwatch_log_retention = 14   # Days to retain logs\ncloudwatch_log_level = \"INFO\"\n</code></pre>"},{"location":"getting-started/configuration/#metrics-configuration","title":"Metrics Configuration","text":"<pre><code># Custom metrics\nenable_custom_metrics = true\nmetrics_namespace = \"Dejafoo\"\n</code></pre>"},{"location":"getting-started/configuration/#regional-configuration","title":"Regional Configuration","text":""},{"location":"getting-started/configuration/#supported-aws-regions","title":"Supported AWS Regions","text":"<ul> <li>eu-west-3 (Paris) - Default</li> <li>us-east-1 (N. Virginia)</li> <li>us-west-2 (Oregon)</li> <li>ap-southeast-1 (Singapore)</li> </ul>"},{"location":"getting-started/configuration/#regional-endpoints","title":"Regional Endpoints","text":"<p>This deployment uses regional API Gateway endpoints:</p> <ul> <li>No CloudFront: Requests go directly to your specified region</li> <li>Simplified Caching: Your custom S3-based caching works without CloudFront interference</li> <li>Lower Latency: For users in your region, requests are faster</li> <li>Simpler Architecture: Fewer moving parts, easier to debug</li> </ul>"},{"location":"getting-started/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"getting-started/configuration/#development-environment","title":"Development Environment","text":"<pre><code># Development settings\nenvironment = \"dev\"\nlambda_memory_size = 128\ndefault_ttl_seconds = 300\ns3_lifecycle_days = 7\n</code></pre>"},{"location":"getting-started/configuration/#staging-environment","title":"Staging Environment","text":"<pre><code># Staging settings\nenvironment = \"staging\"\nlambda_memory_size = 256\ndefault_ttl_seconds = 1800\ns3_lifecycle_days = 14\n</code></pre>"},{"location":"getting-started/configuration/#production-environment","title":"Production Environment","text":"<pre><code># Production settings\nenvironment = \"prod\"\nlambda_memory_size = 512\ndefault_ttl_seconds = 3600\ns3_lifecycle_days = 30\n</code></pre>"},{"location":"getting-started/configuration/#custom-upstream-configuration","title":"Custom Upstream Configuration","text":""},{"location":"getting-started/configuration/#default-upstream-service","title":"Default Upstream Service","text":"<pre><code># Set default upstream service\nupstream_base_url = \"https://api.example.com\"\n</code></pre>"},{"location":"getting-started/configuration/#dynamic-upstream-selection","title":"Dynamic Upstream Selection","text":"<p>You can override the upstream service using headers:</p> <pre><code># Use custom upstream service\ncurl -H \"X-Upstream-URL: https://api.other.com\" \\\n  \"https://myapp123.dejafoo.io?url=/users&amp;ttl=1h\"\n</code></pre>"},{"location":"getting-started/configuration/#cache-behavior-configuration","title":"Cache Behavior Configuration","text":""},{"location":"getting-started/configuration/#cache-invalidation","title":"Cache Invalidation","text":"<pre><code># Cache invalidation settings\ncache_invalidation_enabled = true\ncache_invalidation_ttl = 3600\n</code></pre>"},{"location":"getting-started/configuration/#large-file-handling","title":"Large File Handling","text":"<pre><code># Large file configuration\nmax_cache_size_mb = 1           # Max size before S3 fallback\ns3_fallback_enabled = true\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\ndebug_mode = true\nlog_level = \"DEBUG\"\n</code></pre>"},{"location":"getting-started/configuration/#health-check-configuration","title":"Health Check Configuration","text":"<pre><code># Health check settings\nhealth_check_enabled = true\nhealth_check_path = \"/health\"\nhealth_check_interval = 30\n</code></pre>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code># Basic production configuration\naws_region = \"eu-west-3\"\nenvironment = \"prod\"\ndomain_name = \"api.yourdomain.com\"\nlambda_memory_size = 256\ndefault_ttl_seconds = 3600\n</code></pre>"},{"location":"getting-started/configuration/#high-performance-configuration","title":"High-Performance Configuration","text":"<pre><code># High-performance configuration\naws_region = \"us-east-1\"\nenvironment = \"prod\"\ndomain_name = \"api.yourdomain.com\"\nlambda_memory_size = 1024\nlambda_timeout = 60\ndefault_ttl_seconds = 7200\ns3_transfer_acceleration = true\n</code></pre>"},{"location":"getting-started/configuration/#development-configuration","title":"Development Configuration","text":"<pre><code># Development configuration\naws_region = \"eu-west-3\"\nenvironment = \"dev\"\ndomain_name = \"dev-api.yourdomain.com\"\nlambda_memory_size = 128\ndefault_ttl_seconds = 300\ndebug_mode = true\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"getting-started/configuration/#terraform-validation","title":"Terraform Validation","text":"<pre><code># Validate Terraform configuration\ncd infra/phase1\nterraform validate\n\ncd ../phase2\nterraform validate\n</code></pre>"},{"location":"getting-started/configuration/#configuration-testing","title":"Configuration Testing","text":"<pre><code># Test configuration\nnode tests/test-production.js\n</code></pre>"},{"location":"getting-started/configuration/#health-check","title":"Health Check","text":"<pre><code># Check configuration health\ncurl \"https://api.yourdomain.com/health\"\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide walks you through installing and configuring Dejafoo for self-hosted deployment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#required-software","title":"Required Software","text":"<ul> <li>AWS CLI: Configured with appropriate permissions</li> <li>Terraform: Version 1.0 or higher</li> <li>Node.js: Version 18 or higher</li> <li>Git: For cloning the repository</li> </ul>"},{"location":"getting-started/installation/#aws-permissions","title":"AWS Permissions","text":"<p>Your AWS credentials need permissions for:</p> <ul> <li>Lambda (create, update, invoke)</li> <li>API Gateway (create, update, deploy)</li> <li>S3 (create bucket, read/write objects)</li> <li>Route53 (create hosted zone, manage DNS records)</li> <li>ACM (create and manage SSL certificates)</li> <li>IAM (create roles and policies)</li> <li>CloudWatch (create log groups)</li> </ul>"},{"location":"getting-started/installation/#domain-name-optional","title":"Domain Name (Optional)","text":"<p>While not required, having a custom domain provides: - Professional appearance - SSL certificate management - Better branding</p>"},{"location":"getting-started/installation/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/camrail/dejafoo.git\ncd dejafoo\n</code></pre>"},{"location":"getting-started/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install Node.js dependencies\nnpm install\n\n# Install Python dependencies for documentation (optional)\ncd docs\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#3-configure-environment","title":"3. Configure Environment","text":"<p>Create your configuration file:</p> <pre><code>cp infra/phase1/terraform.tfvars.example infra/phase1/terraform.tfvars\n</code></pre> <p>Edit <code>infra/phase1/terraform.tfvars</code>:</p> <pre><code>aws_region = \"eu-west-3\"        # Your preferred AWS region\nenvironment = \"prod\"            # Environment name\ndomain_name = \"yourdomain.com\"  # Your domain (optional)\n</code></pre>"},{"location":"getting-started/installation/#4-deploy-infrastructure","title":"4. Deploy Infrastructure","text":"<p>Deploy in two phases to handle SSL certificate validation:</p> <pre><code>cd infra\n\n# Phase 1: Core infrastructure\n./phase1.sh\n\n# Note the nameservers output - update these at your domain registrar\n# Wait for DNS propagation (5-60 minutes)\n\n# Phase 2: DNS and SSL\n./phase2.sh\n</code></pre>"},{"location":"getting-started/installation/#5-deploy-application-code","title":"5. Deploy Application Code","text":"<pre><code>cd ..\n./deploy-code.sh\n</code></pre>"},{"location":"getting-started/installation/#6-verify-installation","title":"6. Verify Installation","text":"<pre><code># Run comprehensive test suite\nnode tests/test-production.js\n\n# Test with your domain\ncurl \"https://api.yourdomain.com?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n</code></pre>"},{"location":"getting-started/installation/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>The Lambda function uses these environment variables:</p> <ul> <li><code>S3_BUCKET_NAME</code>: S3 bucket for cache storage</li> <li><code>UPSTREAM_BASE_URL</code>: Default upstream service URL</li> <li><code>CACHE_TTL_SECONDS</code>: Default cache TTL in seconds</li> <li><code>NODE_ENV</code>: Set to \"production\"</li> </ul>"},{"location":"getting-started/installation/#terraform-variables","title":"Terraform Variables","text":"<p>Key configuration options in <code>terraform.tfvars</code>:</p> <pre><code># AWS Configuration\naws_region = \"eu-west-3\"        # AWS region\nenvironment = \"prod\"            # Environment name\n\n# Domain Configuration\ndomain_name = \"yourdomain.com\"  # Custom domain (optional)\n\n# Lambda Configuration\nlambda_timeout = 30             # Lambda timeout in seconds\nlambda_memory_size = 256        # Lambda memory in MB\n\n# Cache Configuration\ndefault_ttl_seconds = 3600      # Default cache TTL\nmax_cache_size_mb = 1           # Max size before S3 fallback\n</code></pre>"},{"location":"getting-started/installation/#regional-configuration","title":"Regional Configuration","text":""},{"location":"getting-started/installation/#supported-aws-regions","title":"Supported AWS Regions","text":"<p>Dejafoo works in any AWS region, but we recommend:</p> <ul> <li>eu-west-3 (Paris) - Default</li> <li>us-east-1 (N. Virginia)</li> <li>us-west-2 (Oregon)</li> <li>ap-southeast-1 (Singapore)</li> </ul>"},{"location":"getting-started/installation/#regional-endpoints","title":"Regional Endpoints","text":"<p>This deployment uses regional API Gateway endpoints instead of edge-optimized:</p> <ul> <li>No CloudFront: Requests go directly to your specified region</li> <li>Simplified Caching: Your custom S3-based caching works without CloudFront interference</li> <li>Lower Latency: For users in your region, requests are faster</li> <li>Simpler Architecture: Fewer moving parts, easier to debug</li> </ul>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Terraform State Conflicts <pre><code># If you get state conflicts, clean up and retry\ncd infra/phase1\nterraform destroy\ncd ../phase2\nterraform destroy\n</code></pre></p> </li> <li> <p>IAM Role Conflicts <pre><code># Delete existing roles manually\naws iam delete-role-policy --role-name dejafoo-lambda-role --policy-name dejafoo-lambda-policy\naws iam delete-role --role-name dejafoo-lambda-role\n</code></pre></p> </li> <li> <p>S3 Bucket Name Conflicts</p> </li> <li>S3 bucket names must be globally unique</li> <li> <p>Change the bucket name in <code>terraform.tfvars</code></p> </li> <li> <p>SSL Certificate Validation</p> </li> <li>Ensure nameservers are updated before Phase 2</li> <li>Wait for DNS propagation (5-60 minutes)</li> <li>Check with: <code>nslookup -type=NS yourdomain.com</code></li> </ol>"},{"location":"getting-started/installation/#verification-commands","title":"Verification Commands","text":"<pre><code># Check AWS credentials\naws sts get-caller-identity\n\n# Verify Terraform installation\nterraform version\n\n# Check Node.js version\nnode --version\n\n# Test API Gateway directly\ncurl -v \"https://your-api-id.execute-api.region.amazonaws.com/prod?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about configuration options</li> <li>Explore usage patterns</li> <li>Set up monitoring</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get Dejafoo running in 5 minutes using the free hosted version or deploy your own instance.</p>"},{"location":"getting-started/quick-start/#option-1-free-hosted-version-recommended","title":"Option 1: Free Hosted Version (Recommended)","text":"<p>The fastest way to get started is using the free hosted version at <code>dejafoo.io</code>:</p>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<pre><code># Cache an API response for 30 seconds\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n\n# Cache for 1 hour\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/data&amp;ttl=1h\"\n\n# Use different subdomain for isolation\ncurl \"https://another456.dejafoo.io?url=https://api.example.com/users&amp;ttl=7d\"\n</code></pre>"},{"location":"getting-started/quick-start/#parameters","title":"Parameters","text":"<ul> <li><code>url</code>: The upstream API endpoint to cache</li> <li><code>ttl</code>: Time-to-live (<code>7s</code>, <code>7m</code>, <code>7d</code> for seconds, minutes, days)</li> </ul>"},{"location":"getting-started/quick-start/#response-headers","title":"Response Headers","text":"<pre><code>HTTP/1.1 200 OK\nx-cache: HIT\nx-cache-key: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456\nx-cache-ttl: 604800\n</code></pre>"},{"location":"getting-started/quick-start/#option-2-self-hosted-deployment","title":"Option 2: Self-Hosted Deployment","text":""},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS CLI configured with appropriate permissions</li> <li>Terraform &gt;= 1.0</li> <li>Node.js &gt;= 18</li> <li>Domain name (optional)</li> </ul>"},{"location":"getting-started/quick-start/#1-clone-and-configure","title":"1. Clone and Configure","text":"<pre><code>git clone https://github.com/camrail/dejafoo.git\ncd dejafoo\n\n# Configure your domain\ncp infra/phase1/terraform.tfvars.example infra/phase1/terraform.tfvars\n# Edit infra/phase1/terraform.tfvars with your settings\n</code></pre>"},{"location":"getting-started/quick-start/#2-deploy-infrastructure","title":"2. Deploy Infrastructure","text":"<pre><code>cd infra\n./phase1.sh  # Deploy core infrastructure\n# Update nameservers at your domain registrar\n./phase2.sh  # Deploy DNS &amp; SSL\n</code></pre>"},{"location":"getting-started/quick-start/#3-deploy-code","title":"3. Deploy Code","text":"<pre><code>cd ..\n./deploy-code.sh  # Deploy Lambda function\n</code></pre>"},{"location":"getting-started/quick-start/#4-test","title":"4. Test","text":"<pre><code>node tests/test-production.js\n</code></pre>"},{"location":"getting-started/quick-start/#usage-examples","title":"Usage Examples","text":""},{"location":"getting-started/quick-start/#basic-caching","title":"Basic Caching","text":"<pre><code># First request - cache miss\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n# Response: x-cache: MISS\n\n# Second request - cache hit\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n# Response: x-cache: HIT\n</code></pre>"},{"location":"getting-started/quick-start/#subdomain-isolation","title":"Subdomain Isolation","text":"<pre><code># Different subdomains = separate cache stores\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/data&amp;ttl=1h\"\ncurl \"https://otherapp456.dejafoo.io?url=https://api.example.com/data&amp;ttl=1h\"\n# These won't share cache entries\n</code></pre>"},{"location":"getting-started/quick-start/#different-http-methods","title":"Different HTTP Methods","text":"<pre><code># GET request\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# POST request (different cache entry)\ncurl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John\"}'\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about advanced configuration</li> <li>Explore caching strategies</li> <li>Set up monitoring</li> <li>Read the API reference</li> </ul>"},{"location":"reference/environment-variables/","title":"Environment Variables Reference","text":"<p>Complete reference for all environment variables used in Dejafoo.</p>"},{"location":"reference/environment-variables/#lambda-function-environment-variables","title":"Lambda Function Environment Variables","text":""},{"location":"reference/environment-variables/#required-variables","title":"Required Variables","text":"Variable Description Example Required <code>S3_BUCKET_NAME</code> S3 bucket for cache storage <code>dejafoo-cache-prod</code> Yes"},{"location":"reference/environment-variables/#optional-variables","title":"Optional Variables","text":"Variable Description Default Example <code>UPSTREAM_BASE_URL</code> Default upstream service URL - <code>https://api.example.com</code> <code>CACHE_TTL_SECONDS</code> Default cache TTL in seconds <code>3600</code> <code>7200</code> <code>NODE_ENV</code> Node environment <code>production</code> <code>development</code> <code>LOG_LEVEL</code> Logging level <code>info</code> <code>debug</code> <code>MAX_CACHE_SIZE_MB</code> Max size before S3 fallback <code>1</code> <code>5</code> <code>ENABLE_DEBUG</code> Enable debug logging <code>false</code> <code>true</code>"},{"location":"reference/environment-variables/#terraform-environment-variables","title":"Terraform Environment Variables","text":""},{"location":"reference/environment-variables/#aws-configuration","title":"AWS Configuration","text":"Variable Description Example <code>AWS_REGION</code> AWS region <code>eu-west-3</code> <code>AWS_PROFILE</code> AWS profile <code>default</code> <code>AWS_ACCESS_KEY_ID</code> AWS access key <code>AKIA...</code> <code>AWS_SECRET_ACCESS_KEY</code> AWS secret key <code>...</code>"},{"location":"reference/environment-variables/#terraform-configuration","title":"Terraform Configuration","text":"Variable Description Example <code>TF_VAR_environment</code> Environment name <code>prod</code> <code>TF_VAR_domain_name</code> Domain name <code>api.yourdomain.com</code> <code>TF_VAR_aws_region</code> AWS region <code>eu-west-3</code>"},{"location":"reference/environment-variables/#phase-1-variables","title":"Phase 1 Variables","text":""},{"location":"reference/environment-variables/#core-configuration","title":"Core Configuration","text":"<pre><code># infra/phase1/terraform.tfvars\naws_region = \"eu-west-3\"        # AWS region\nenvironment = \"prod\"            # Environment name\ndomain_name = \"yourdomain.com\"  # Domain name (optional)\n</code></pre>"},{"location":"reference/environment-variables/#lambda-configuration","title":"Lambda Configuration","text":"<pre><code># Lambda function settings\nlambda_timeout = 30             # Timeout in seconds\nlambda_memory_size = 256        # Memory in MB\nlambda_runtime = \"nodejs18.x\"   # Runtime version\n</code></pre>"},{"location":"reference/environment-variables/#s3-configuration","title":"S3 Configuration","text":"<pre><code># S3 bucket settings\ns3_bucket_name = \"dejafoo-cache-prod\"\ns3_encryption = true\ns3_lifecycle_enabled = true\ns3_lifecycle_days = 30\n</code></pre>"},{"location":"reference/environment-variables/#cache-configuration","title":"Cache Configuration","text":"<pre><code># Cache settings\ndefault_ttl_seconds = 3600      # Default TTL\nmax_cache_size_mb = 1           # Max size before S3 fallback\ncache_compression = true        # Enable compression\n</code></pre>"},{"location":"reference/environment-variables/#phase-2-variables","title":"Phase 2 Variables","text":""},{"location":"reference/environment-variables/#ssl-configuration","title":"SSL Configuration","text":"<pre><code># SSL certificate settings\nssl_certificate_provider = \"acm\"\nssl_certificate_validation = \"dns\"\nssl_certificate_validation_timeout = \"10m\"\n</code></pre>"},{"location":"reference/environment-variables/#dns-configuration","title":"DNS Configuration","text":"<pre><code># DNS settings\ndns_ttl = 300                   # DNS record TTL\ndns_propagation_timeout = \"10m\" # DNS propagation timeout\n</code></pre>"},{"location":"reference/environment-variables/#api-gateway-configuration","title":"API Gateway Configuration","text":"<pre><code># API Gateway settings\napigateway_type = \"REGIONAL\"    # Endpoint type\napigateway_throttle_burst = 5000\napigateway_throttle_rate = 2000\n</code></pre>"},{"location":"reference/environment-variables/#environment-specific-variables","title":"Environment-Specific Variables","text":""},{"location":"reference/environment-variables/#development-environment","title":"Development Environment","text":"<pre><code># Development settings\nenvironment = \"dev\"\nlambda_memory_size = 128\ndefault_ttl_seconds = 300\ns3_lifecycle_days = 7\nlog_level = \"debug\"\nenable_debug = true\n</code></pre>"},{"location":"reference/environment-variables/#staging-environment","title":"Staging Environment","text":"<pre><code># Staging settings\nenvironment = \"staging\"\nlambda_memory_size = 256\ndefault_ttl_seconds = 1800\ns3_lifecycle_days = 14\nlog_level = \"info\"\nenable_debug = false\n</code></pre>"},{"location":"reference/environment-variables/#production-environment","title":"Production Environment","text":"<pre><code># Production settings\nenvironment = \"prod\"\nlambda_memory_size = 512\ndefault_ttl_seconds = 3600\ns3_lifecycle_days = 30\nlog_level = \"warn\"\nenable_debug = false\n</code></pre>"},{"location":"reference/environment-variables/#custom-environment-variables","title":"Custom Environment Variables","text":""},{"location":"reference/environment-variables/#adding-custom-variables","title":"Adding Custom Variables","text":"<ol> <li> <p>Update Terraform Variables:    <pre><code># infra/phase1/variables.tf\nvariable \"custom_setting\" {\n  description = \"Custom setting\"\n  type        = string\n  default     = \"default_value\"\n}\n</code></pre></p> </li> <li> <p>Update Lambda Environment:    <pre><code># infra/phase1/modules/lambda/main.tf\nenvironment {\n  variables = {\n    CUSTOM_SETTING = var.custom_setting\n  }\n}\n</code></pre></p> </li> <li> <p>Update Lambda Code:    <pre><code>// src/index.js\nconst customSetting = process.env.CUSTOM_SETTING || 'default_value';\n</code></pre></p> </li> </ol>"},{"location":"reference/environment-variables/#environment-variable-validation","title":"Environment Variable Validation","text":"<pre><code>// src/index.js\nfunction validateEnvironment() {\n  const required = ['S3_BUCKET_NAME'];\n  const missing = required.filter(key =&gt; !process.env[key]);\n\n  if (missing.length &gt; 0) {\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\n  }\n}\n</code></pre>"},{"location":"reference/environment-variables/#security-considerations","title":"Security Considerations","text":""},{"location":"reference/environment-variables/#sensitive-variables","title":"Sensitive Variables","text":"<p>Never store sensitive data in environment variables:</p> <ul> <li>API Keys: Use AWS Secrets Manager</li> <li>Passwords: Use AWS Secrets Manager</li> <li>Tokens: Use AWS Secrets Manager</li> </ul>"},{"location":"reference/environment-variables/#environment-variable-encryption","title":"Environment Variable Encryption","text":"<pre><code># Use AWS KMS for encryption\nresource \"aws_kms_key\" \"dejafoo_key\" {\n  description = \"Dejafoo encryption key\"\n}\n\nresource \"aws_kms_alias\" \"dejafoo_alias\" {\n  name          = \"alias/dejafoo\"\n  target_key_id = aws_kms_key.dejafoo_key.key_id\n}\n</code></pre>"},{"location":"reference/environment-variables/#monitoring-environment-variables","title":"Monitoring Environment Variables","text":""},{"location":"reference/environment-variables/#cloudwatch-integration","title":"CloudWatch Integration","text":"<pre><code># CloudWatch environment variables\nenvironment {\n  variables = {\n    CLOUDWATCH_NAMESPACE = \"Dejafoo\"\n    CLOUDWATCH_METRICS_ENABLED = \"true\"\n    LOG_LEVEL = \"info\"\n  }\n}\n</code></pre>"},{"location":"reference/environment-variables/#custom-metrics","title":"Custom Metrics","text":"<pre><code>// src/index.js\nconst cloudwatch = new AWS.CloudWatch();\n\nfunction publishMetric(metricName, value, unit = 'Count') {\n  if (process.env.CLOUDWATCH_METRICS_ENABLED === 'true') {\n    cloudwatch.putMetricData({\n      Namespace: process.env.CLOUDWATCH_NAMESPACE || 'Dejafoo',\n      MetricData: [{\n        MetricName: metricName,\n        Value: value,\n        Unit: unit\n      }]\n    }).promise();\n  }\n}\n</code></pre>"},{"location":"reference/environment-variables/#troubleshooting-environment-variables","title":"Troubleshooting Environment Variables","text":""},{"location":"reference/environment-variables/#debug-environment-variables","title":"Debug Environment Variables","text":"<pre><code>// src/index.js\nfunction debugEnvironment() {\n  if (process.env.ENABLE_DEBUG === 'true') {\n    console.log('Environment variables:', {\n      S3_BUCKET_NAME: process.env.S3_BUCKET_NAME,\n      UPSTREAM_BASE_URL: process.env.UPSTREAM_BASE_URL,\n      CACHE_TTL_SECONDS: process.env.CACHE_TTL_SECONDS,\n      NODE_ENV: process.env.NODE_ENV\n    });\n  }\n}\n</code></pre>"},{"location":"reference/environment-variables/#environment-variable-testing","title":"Environment Variable Testing","text":"<pre><code># Test Lambda function with custom environment\naws lambda invoke --function-name dejafoo-proxy-prod \\\n  --payload '{\"test\": true}' \\\n  response.json\n\n# Check Lambda environment variables\naws lambda get-function-configuration --function-name dejafoo-proxy-prod\n</code></pre>"},{"location":"reference/environment-variables/#common-issues","title":"Common Issues","text":"<ol> <li>Missing Required Variables:</li> <li>Check Terraform configuration</li> <li>Verify Lambda function environment</li> <li> <p>Check CloudWatch logs</p> </li> <li> <p>Invalid Variable Values:</p> </li> <li>Validate variable types</li> <li>Check variable constraints</li> <li> <p>Test with valid values</p> </li> <li> <p>Environment Variable Not Updated:</p> </li> <li>Redeploy Lambda function</li> <li>Check Terraform state</li> <li>Verify variable propagation</li> </ol>"},{"location":"reference/environment-variables/#best-practices","title":"Best Practices","text":""},{"location":"reference/environment-variables/#variable-naming","title":"Variable Naming","text":"<ul> <li>Use UPPER_CASE for environment variables</li> <li>Use descriptive names</li> <li>Follow consistent naming conventions</li> </ul>"},{"location":"reference/environment-variables/#variable-documentation","title":"Variable Documentation","text":"<ul> <li>Document all variables</li> <li>Include examples</li> <li>Specify required vs optional</li> </ul>"},{"location":"reference/environment-variables/#variable-validation","title":"Variable Validation","text":"<ul> <li>Validate required variables</li> <li>Check variable types</li> <li>Provide default values where appropriate</li> </ul>"},{"location":"reference/environment-variables/#security","title":"Security","text":"<ul> <li>Never store secrets in environment variables</li> <li>Use AWS Secrets Manager for sensitive data</li> <li>Encrypt sensitive variables</li> <li>Rotate secrets regularly</li> </ul>"},{"location":"reference/terraform-modules/","title":"Terraform Modules Reference","text":"<p>Complete reference for all Terraform modules used in Dejafoo infrastructure.</p>"},{"location":"reference/terraform-modules/#module-structure","title":"Module Structure","text":"<p>Dejafoo uses a modular Terraform structure with separate modules for each AWS service:</p> <pre><code>infra/\n\u251c\u2500\u2500 phase1/                # Phase 1 modules (no SSL)\n\u2502   \u2514\u2500\u2500 modules/\n\u2502       \u251c\u2500\u2500 apigateway/    # API Gateway without custom domain\n\u2502       \u251c\u2500\u2500 lambda/        # Lambda function\n\u2502       \u251c\u2500\u2500 s3/            # S3 bucket for caching\n\u2502       \u2514\u2500\u2500 route53/       # Route53 zone only (no SSL)\n\u2514\u2500\u2500 phase2/                # Phase 2 modules (with SSL)\n    \u2514\u2500\u2500 modules/\n        \u251c\u2500\u2500 apigateway/    # API Gateway with custom domain\n        \u251c\u2500\u2500 lambda/        # Lambda function (same as Phase 1)\n        \u251c\u2500\u2500 s3/            # S3 bucket (same as Phase 1)\n        \u2514\u2500\u2500 route53/       # Route53 with SSL certificates\n</code></pre>"},{"location":"reference/terraform-modules/#phase-1-modules","title":"Phase 1 Modules","text":""},{"location":"reference/terraform-modules/#api-gateway-module","title":"API Gateway Module","text":"<p>Path: <code>infra/phase1/modules/apigateway/</code></p> <p>Creates API Gateway without custom domain configuration.</p> <p>Variables: - <code>environment</code> (string): Environment name - <code>lambda_function_name</code> (string): Lambda function name - <code>lambda_invoke_arn</code> (string): Lambda invoke ARN</p> <p>Outputs: - <code>api_gateway_url</code> (string): API Gateway URL - <code>api_gateway_id</code> (string): API Gateway ID</p> <p>Resources: - <code>aws_api_gateway_rest_api</code> - <code>aws_api_gateway_resource</code> - <code>aws_api_gateway_method</code> - <code>aws_api_gateway_integration</code> - <code>aws_api_gateway_deployment</code></p>"},{"location":"reference/terraform-modules/#lambda-module","title":"Lambda Module","text":"<p>Path: <code>infra/phase1/modules/lambda/</code></p> <p>Creates Lambda function with IAM roles and policies.</p> <p>Variables: - <code>environment</code> (string): Environment name - <code>s3_bucket_name</code> (string): S3 bucket name for cache storage - <code>upstream_base_url</code> (string): Default upstream service URL - <code>cache_ttl_seconds</code> (number): Default cache TTL in seconds</p> <p>Outputs: - <code>lambda_function_name</code> (string): Lambda function name - <code>lambda_invoke_arn</code> (string): Lambda invoke ARN - <code>lambda_function_arn</code> (string): Lambda function ARN</p> <p>Resources: - <code>aws_lambda_function</code> - <code>aws_iam_role</code> - <code>aws_iam_role_policy</code> - <code>aws_cloudwatch_log_group</code></p>"},{"location":"reference/terraform-modules/#s3-module","title":"S3 Module","text":"<p>Path: <code>infra/phase1/modules/s3/</code></p> <p>Creates S3 bucket for cache storage with encryption and lifecycle policies.</p> <p>Variables: - <code>environment</code> (string): Environment name - <code>bucket_name</code> (string): S3 bucket name</p> <p>Outputs: - <code>bucket_name</code> (string): S3 bucket name - <code>bucket_arn</code> (string): S3 bucket ARN</p> <p>Resources: - <code>aws_s3_bucket</code> - <code>aws_s3_bucket_versioning</code> - <code>aws_s3_bucket_server_side_encryption_configuration</code> - <code>aws_s3_bucket_lifecycle_configuration</code></p>"},{"location":"reference/terraform-modules/#route53-module-phase-1","title":"Route53 Module (Phase 1)","text":"<p>Path: <code>infra/phase1/modules/route53/</code></p> <p>Creates Route53 hosted zone and outputs nameservers.</p> <p>Variables: - <code>domain_name</code> (string): Domain name for hosted zone</p> <p>Outputs: - <code>hosted_zone_id</code> (string): Route53 hosted zone ID - <code>nameservers</code> (list): Nameservers for domain configuration</p> <p>Resources: - <code>aws_route53_zone</code></p>"},{"location":"reference/terraform-modules/#phase-2-modules","title":"Phase 2 Modules","text":""},{"location":"reference/terraform-modules/#api-gateway-module-phase-2","title":"API Gateway Module (Phase 2)","text":"<p>Path: <code>infra/phase2/modules/apigateway/</code></p> <p>Creates API Gateway with custom domain configuration.</p> <p>Variables: - <code>environment</code> (string): Environment name - <code>domain_name</code> (string): Custom domain name - <code>certificate_arn</code> (string): SSL certificate ARN - <code>lambda_function_name</code> (string): Lambda function name - <code>lambda_invoke_arn</code> (string): Lambda invoke ARN</p> <p>Outputs: - <code>api_gateway_url</code> (string): API Gateway URL - <code>api_gateway_id</code> (string): API Gateway ID - <code>custom_domain_name</code> (string): Custom domain name</p> <p>Resources: - <code>aws_api_gateway_rest_api</code> - <code>aws_api_gateway_resource</code> - <code>aws_api_gateway_method</code> - <code>aws_api_gateway_integration</code> - <code>aws_api_gateway_deployment</code> - <code>aws_api_gateway_domain_name</code> - <code>aws_api_gateway_base_path_mapping</code></p>"},{"location":"reference/terraform-modules/#route53-module-phase-2","title":"Route53 Module (Phase 2)","text":"<p>Path: <code>infra/phase2/modules/route53/</code></p> <p>Creates Route53 hosted zone with SSL certificates and DNS records.</p> <p>Variables: - <code>domain_name</code> (string): Domain name for hosted zone - <code>api_gateway_domain_name</code> (string): API Gateway domain name - <code>api_gateway_zone_id</code> (string): API Gateway zone ID</p> <p>Outputs: - <code>hosted_zone_id</code> (string): Route53 hosted zone ID - <code>certificate_arn</code> (string): SSL certificate ARN - <code>nameservers</code> (list): Nameservers for domain configuration</p> <p>Resources: - <code>aws_route53_zone</code> - <code>aws_acm_certificate</code> - <code>aws_acm_certificate_validation</code> - <code>aws_route53_record</code> (certificate validation) - <code>aws_route53_record</code> (A record) - <code>aws_route53_record</code> (CNAME record)</p>"},{"location":"reference/terraform-modules/#module-usage","title":"Module Usage","text":""},{"location":"reference/terraform-modules/#phase-1-usage","title":"Phase 1 Usage","text":"<pre><code># infra/phase1/core.tf\nmodule \"s3\" {\n  source = \"./modules/s3\"\n\n  environment = var.environment\n  bucket_name = \"dejafoo-cache-${var.environment}\"\n}\n\nmodule \"lambda\" {\n  source = \"./modules/lambda\"\n\n  environment = var.environment\n  s3_bucket_name = module.s3.bucket_name\n  upstream_base_url = var.upstream_base_url\n  cache_ttl_seconds = var.cache_ttl_seconds\n}\n\nmodule \"apigateway\" {\n  source = \"./modules/apigateway\"\n\n  environment = var.environment\n  lambda_function_name = module.lambda.lambda_function_name\n  lambda_invoke_arn = module.lambda.lambda_invoke_arn\n}\n\nmodule \"route53\" {\n  source = \"./modules/route53\"\n\n  domain_name = var.domain_name\n}\n</code></pre>"},{"location":"reference/terraform-modules/#phase-2-usage","title":"Phase 2 Usage","text":"<pre><code># infra/phase2/dns.tf\nmodule \"route53\" {\n  source = \"./modules/route53\"\n\n  domain_name = var.domain_name\n  api_gateway_domain_name = module.apigateway.custom_domain_name\n  api_gateway_zone_id = module.apigateway.api_gateway_zone_id\n}\n\nmodule \"apigateway\" {\n  source = \"./modules/apigateway\"\n\n  environment = var.environment\n  domain_name = var.domain_name\n  certificate_arn = module.route53.certificate_arn\n  lambda_function_name = var.lambda_function_name\n  lambda_invoke_arn = var.lambda_invoke_arn\n}\n</code></pre>"},{"location":"reference/terraform-modules/#module-dependencies","title":"Module Dependencies","text":""},{"location":"reference/terraform-modules/#phase-1-dependencies","title":"Phase 1 Dependencies","text":"<pre><code>S3 \u2192 Lambda \u2192 API Gateway\nRoute53 (independent)\n</code></pre>"},{"location":"reference/terraform-modules/#phase-2-dependencies","title":"Phase 2 Dependencies","text":"<pre><code>Route53 \u2192 API Gateway\n</code></pre>"},{"location":"reference/terraform-modules/#module-variables","title":"Module Variables","text":""},{"location":"reference/terraform-modules/#common-variables","title":"Common Variables","text":"<p>All modules use these common variables:</p> <ul> <li><code>environment</code> (string): Environment name (dev, staging, prod)</li> <li><code>aws_region</code> (string): AWS region</li> <li><code>tags</code> (map): Common tags for all resources</li> </ul>"},{"location":"reference/terraform-modules/#module-specific-variables","title":"Module-Specific Variables","text":"<p>Each module has specific variables for its functionality:</p> <ul> <li>S3: <code>bucket_name</code>, <code>encryption</code>, <code>lifecycle_policies</code></li> <li>Lambda: <code>function_name</code>, <code>runtime</code>, <code>memory_size</code>, <code>timeout</code></li> <li>API Gateway: <code>api_name</code>, <code>stage_name</code>, <code>throttle_settings</code></li> <li>Route53: <code>domain_name</code>, <code>record_type</code>, <code>ttl</code></li> </ul>"},{"location":"reference/terraform-modules/#module-outputs","title":"Module Outputs","text":""},{"location":"reference/terraform-modules/#s3-module-outputs","title":"S3 Module Outputs","text":"<ul> <li><code>bucket_name</code>: S3 bucket name</li> <li><code>bucket_arn</code>: S3 bucket ARN</li> <li><code>bucket_domain_name</code>: S3 bucket domain name</li> </ul>"},{"location":"reference/terraform-modules/#lambda-module-outputs","title":"Lambda Module Outputs","text":"<ul> <li><code>lambda_function_name</code>: Lambda function name</li> <li><code>lambda_function_arn</code>: Lambda function ARN</li> <li><code>lambda_invoke_arn</code>: Lambda invoke ARN</li> </ul>"},{"location":"reference/terraform-modules/#api-gateway-module-outputs","title":"API Gateway Module Outputs","text":"<ul> <li><code>api_gateway_url</code>: API Gateway URL</li> <li><code>api_gateway_id</code>: API Gateway ID</li> <li><code>custom_domain_name</code>: Custom domain name (Phase 2)</li> </ul>"},{"location":"reference/terraform-modules/#route53-module-outputs","title":"Route53 Module Outputs","text":"<ul> <li><code>hosted_zone_id</code>: Route53 hosted zone ID</li> <li><code>nameservers</code>: Nameservers for domain configuration</li> <li><code>certificate_arn</code>: SSL certificate ARN (Phase 2)</li> </ul>"},{"location":"reference/terraform-modules/#module-testing","title":"Module Testing","text":""},{"location":"reference/terraform-modules/#unit-testing","title":"Unit Testing","text":"<p>Each module can be tested independently:</p> <pre><code># Test S3 module\ncd infra/phase1/modules/s3\nterraform init\nterraform plan\n\n# Test Lambda module\ncd infra/phase1/modules/lambda\nterraform init\nterraform plan\n</code></pre>"},{"location":"reference/terraform-modules/#integration-testing","title":"Integration Testing","text":"<p>Test modules together:</p> <pre><code># Test Phase 1 integration\ncd infra/phase1\nterraform init\nterraform plan\n\n# Test Phase 2 integration\ncd infra/phase2\nterraform init\nterraform plan\n</code></pre>"},{"location":"reference/terraform-modules/#module-customization","title":"Module Customization","text":""},{"location":"reference/terraform-modules/#adding-new-features","title":"Adding New Features","text":"<p>To add new features to modules:</p> <ol> <li>Update Variables: Add new variables to <code>variables.tf</code></li> <li>Update Resources: Add new resources to <code>main.tf</code></li> <li>Update Outputs: Add new outputs to <code>outputs.tf</code></li> <li>Update Documentation: Update module documentation</li> </ol>"},{"location":"reference/terraform-modules/#module-versioning","title":"Module Versioning","text":"<p>Modules are versioned using Git tags:</p> <pre><code>module \"s3\" {\n  source = \"git::https://github.com/camrail/dejafoo.git//infra/phase1/modules/s3?ref=v1.0.0\"\n\n  environment = var.environment\n  bucket_name = \"dejafoo-cache-${var.environment}\"\n}\n</code></pre>"},{"location":"reference/terraform-modules/#best-practices","title":"Best Practices","text":""},{"location":"reference/terraform-modules/#module-design","title":"Module Design","text":"<ul> <li>Single Responsibility: Each module handles one AWS service</li> <li>Reusability: Modules can be reused across environments</li> <li>Consistency: Consistent naming and structure</li> <li>Documentation: Clear documentation for all modules</li> </ul>"},{"location":"reference/terraform-modules/#module-testing_1","title":"Module Testing","text":"<ul> <li>Unit Tests: Test each module independently</li> <li>Integration Tests: Test modules together</li> <li>Validation: Use <code>terraform validate</code> and <code>terraform plan</code></li> </ul>"},{"location":"reference/terraform-modules/#module-maintenance","title":"Module Maintenance","text":"<ul> <li>Version Control: Use Git tags for module versions</li> <li>Documentation: Keep documentation up to date</li> <li>Testing: Test changes before deployment</li> <li>Monitoring: Monitor module performance and costs</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":"<p>Learn how to use Dejafoo effectively for caching API responses.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>Dejafoo is a high-performance HTTP proxy service that caches expensive API endpoints and shares responses between environments. It provides intelligent S3-based caching with configurable TTL and subdomain isolation.</p>"},{"location":"user-guide/#basic-usage","title":"Basic Usage","text":""},{"location":"user-guide/#simple-caching","title":"Simple Caching","text":"<pre><code># Cache an API response for 30 seconds\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n\n# First request - cache miss\n# Response: x-cache: MISS\n\n# Second request - cache hit\ncurl \"https://myapp123.dejafoo.io?url=https://jsonplaceholder.typicode.com/todos/1&amp;ttl=30s\"\n# Response: x-cache: HIT\n</code></pre>"},{"location":"user-guide/#custom-subdomains","title":"Custom Subdomains","text":"<p>Use different subdomains to create isolated cache stores:</p> <pre><code># These won't share cache entries\ncurl \"https://app1.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://app2.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"},{"location":"user-guide/#different-http-methods","title":"Different HTTP Methods","text":"<pre><code># GET request\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# POST request (different cache entry)\ncurl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John\"}'\n</code></pre>"},{"location":"user-guide/#ttl-time-to-live-configuration","title":"TTL (Time-to-Live) Configuration","text":""},{"location":"user-guide/#ttl-formats","title":"TTL Formats","text":"Format Description Examples <code>Xs</code> Seconds <code>30s</code>, <code>60s</code> <code>Xm</code> Minutes <code>5m</code>, <code>30m</code> <code>Xh</code> Hours <code>1h</code>, <code>24h</code> <code>Xd</code> Days <code>1d</code>, <code>7d</code> <code>Xw</code> Weeks <code>1w</code>, <code>2w</code>"},{"location":"user-guide/#ttl-examples","title":"TTL Examples","text":"<pre><code># Cache for 30 seconds\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/data&amp;ttl=30s\"\n\n# Cache for 1 hour\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/data&amp;ttl=1h\"\n\n# Cache for 7 days\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/data&amp;ttl=7d\"\n</code></pre>"},{"location":"user-guide/#response-headers","title":"Response Headers","text":""},{"location":"user-guide/#cache-status-headers","title":"Cache Status Headers","text":"<pre><code>HTTP/1.1 200 OK\nx-cache: HIT\nx-cache-key: a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456\nx-cache-ttl: 3600\nx-cache-expires: 2024-01-01T12:00:00Z\n</code></pre> Header Description Example <code>x-cache</code> Cache status <code>HIT</code>, <code>MISS</code> <code>x-cache-key</code> Cache key used (SHA-256 hash) <code>a1b2c3d4e5f6...</code> <code>x-cache-ttl</code> TTL in seconds <code>3600</code> <code>x-cache-expires</code> Expiration timestamp <code>2024-01-01T12:00:00Z</code>"},{"location":"user-guide/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/#custom-headers","title":"Custom Headers","text":"<pre><code># Pass custom headers to upstream API\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/protected&amp;ttl=30m\" \\\n  -H \"Authorization: Bearer your-token\"\n</code></pre>"},{"location":"user-guide/#query-parameters","title":"Query Parameters","text":"<pre><code># Cache API with query parameters\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users?page=1&amp;limit=10&amp;ttl=1h\"\n</code></pre>"},{"location":"user-guide/#post-requests-with-body","title":"POST Requests with Body","text":"<pre><code># Cache POST request with JSON body\ncurl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John Doe\", \"email\": \"john@example.com\"}'\n</code></pre>"},{"location":"user-guide/#caching-strategies","title":"Caching Strategies","text":""},{"location":"user-guide/#cache-aside-pattern","title":"Cache-Aside Pattern","text":"<pre><code># 1. Check cache first\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# 2. If cache miss, fetch from upstream\n# 3. Store in cache for future requests\n</code></pre>"},{"location":"user-guide/#write-through-caching","title":"Write-Through Caching","text":"<pre><code># 1. Write to upstream API\ncurl -X POST \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"John\"}'\n\n# 2. Cache is automatically updated\n</code></pre>"},{"location":"user-guide/#cache-invalidation","title":"Cache Invalidation","text":"<pre><code># Cache expires automatically based on TTL\n# No manual invalidation needed\n# Set appropriate TTL for your use case\n</code></pre>"},{"location":"user-guide/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/#ttl-selection","title":"TTL Selection","text":"<ul> <li>Static Data: Use longer TTL (hours/days)</li> <li>Dynamic Data: Use shorter TTL (minutes)</li> <li>User-Specific Data: Use very short TTL (seconds)</li> </ul> <pre><code># Static configuration data\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/config&amp;ttl=24h\"\n\n# Dynamic user data\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/user/profile&amp;ttl=5m\"\n\n# Real-time data\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/status&amp;ttl=30s\"\n</code></pre>"},{"location":"user-guide/#subdomain-organization","title":"Subdomain Organization","text":"<ul> <li>Environment-based: <code>dev.dejafoo.io</code>, <code>staging.dejafoo.io</code>, <code>prod.dejafoo.io</code></li> <li>Application-based: <code>app1.dejafoo.io</code>, <code>app2.dejafoo.io</code></li> <li>Feature-based: <code>api.dejafoo.io</code>, <code>webhooks.dejafoo.io</code></li> </ul> <pre><code># Environment isolation\ncurl \"https://dev.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://prod.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# Application isolation\ncurl \"https://frontend.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://backend.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"},{"location":"user-guide/#error-handling","title":"Error Handling","text":"<pre><code># Handle upstream errors gracefully\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/nonexistent&amp;ttl=30s\"\n# Returns 404 with error details\n\n# Check response status\nif curl -f \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"; then\n  echo \"Success\"\nelse\n  echo \"Error occurred\"\nfi\n</code></pre>"},{"location":"user-guide/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"user-guide/#cache-hit-rate","title":"Cache Hit Rate","text":"<p>Monitor cache performance using response headers:</p> <pre><code># Check cache status\ncurl -I \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n# Look for x-cache header\n</code></pre>"},{"location":"user-guide/#debugging-cache-issues","title":"Debugging Cache Issues","text":"<pre><code># Check cache key generation\ncurl -v \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n# Look for x-cache-key header\n\n# Test cache isolation\ncurl \"https://app1.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://app2.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n# Should have different cache keys\n</code></pre>"},{"location":"user-guide/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Measure response times\ntime curl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# Test cache hit performance\ntime curl \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n# Second request should be faster\n</code></pre>"},{"location":"user-guide/#common-use-cases","title":"Common Use Cases","text":""},{"location":"user-guide/#api-response-caching","title":"API Response Caching","text":"<pre><code># Cache expensive API calls\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/expensive-calculation&amp;ttl=1h\"\n\n# Cache database queries\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/users?active=true&amp;ttl=30m\"\n</code></pre>"},{"location":"user-guide/#cross-environment-data-sharing","title":"Cross-Environment Data Sharing","text":"<pre><code># Share data between environments\ncurl \"https://shared.dejafoo.io?url=https://api.example.com/config&amp;ttl=24h\"\n\n# Use in different applications\ncurl \"https://app1.dejafoo.io?url=https://api.example.com/config&amp;ttl=24h\"\ncurl \"https://app2.dejafoo.io?url=https://api.example.com/config&amp;ttl=24h\"\n</code></pre>"},{"location":"user-guide/#rate-limit-bypass","title":"Rate Limit Bypass","text":"<pre><code># Cache responses to avoid rate limits\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/rate-limited&amp;ttl=1h\"\n\n# Use cached response instead of hitting rate limit\ncurl \"https://myapp123.dejafoo.io?url=https://api.example.com/rate-limited&amp;ttl=1h\"\n</code></pre>"},{"location":"user-guide/#integration-examples","title":"Integration Examples","text":""},{"location":"user-guide/#javascriptnodejs","title":"JavaScript/Node.js","text":"<pre><code>const axios = require('axios');\n\nasync function getCachedData(url, ttl = '1h') {\n  const response = await axios.get('https://myapp123.dejafoo.io', {\n    params: { url, ttl }\n  });\n\n  console.log('Cache status:', response.headers['x-cache']);\n  return response.data;\n}\n\n// Usage\nconst data = await getCachedData('https://api.example.com/users', '30m');\n</code></pre>"},{"location":"user-guide/#python","title":"Python","text":"<pre><code>import requests\n\ndef get_cached_data(url, ttl='1h'):\n    response = requests.get('https://myapp123.dejafoo.io', params={\n        'url': url,\n        'ttl': ttl\n    })\n\n    print(f\"Cache status: {response.headers.get('x-cache')}\")\n    return response.json()\n\n# Usage\ndata = get_cached_data('https://api.example.com/users', '30m')\n</code></pre>"},{"location":"user-guide/#curl-scripts","title":"cURL Scripts","text":"<pre><code>#!/bin/bash\n\n# Cache API response\ncache_api() {\n    local url=$1\n    local ttl=${2:-\"1h\"}\n\n    curl \"https://myapp123.dejafoo.io?url=$url&amp;ttl=$ttl\"\n}\n\n# Usage\ncache_api \"https://api.example.com/users\" \"30m\"\n</code></pre>"},{"location":"user-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":"<ol> <li>Cache Not Working</li> <li>Check TTL format</li> <li>Verify URL encoding</li> <li> <p>Check response headers</p> </li> <li> <p>Subdomain Isolation Issues</p> </li> <li>Ensure different subdomains are used</li> <li> <p>Check cache keys in response headers</p> </li> <li> <p>Performance Issues</p> </li> <li>Check cache hit rate</li> <li>Verify TTL settings</li> <li>Monitor response times</li> </ol>"},{"location":"user-guide/#debug-commands","title":"Debug Commands","text":"<pre><code># Check cache status\ncurl -I \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# Test cache isolation\ncurl \"https://app1.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\ncurl \"https://app2.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n\n# Verify TTL\ncurl -v \"https://myapp123.dejafoo.io?url=https://api.example.com/users&amp;ttl=1h\"\n</code></pre>"}]}